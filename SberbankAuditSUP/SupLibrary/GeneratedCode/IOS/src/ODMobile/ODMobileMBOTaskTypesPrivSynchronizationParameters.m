/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "ODMobileMBOTaskTypesPrivSynchronizationParameters.h"
#import "ODMobileMBOTaskTypesPrivSynchronizationParametersMetaData.h"
#import "SUPJsonObject.h"
#import "ODMobileODMobileDB.h"
#import "SUPSyncParamEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "ODMobileKeyGenerator.h"
#import "ODMobileLocalKeyGenerator.h"
#import "ODMobileLogRecordImpl.h"
#import "ODMobileMBOTaskTypesPriv_pull_pq.h"
#import "ODMobilePersonalizationParameters.h"

@implementation ODMobileMBOTaskTypesPrivSynchronizationParameters

@synthesize emloyeeId = _emloyeeId;
@synthesize emloyeeIdUserDefined = _emloyeeIdUserDefined;

- (void)setEmloyeeId:(NSString*)newEmloyeeId
{
    if (newEmloyeeId != self->_emloyeeId)
    {
		[self->_emloyeeId release];
        self->_emloyeeId = [newEmloyeeId retain];
        self.isDirty = YES;
		_emloyeeIdUserDefined = YES;
    }
}

- (void)setEmloyeeIdUserDefined:(BOOL)newEmloyeeIdUserDefined
{
    if (newEmloyeeIdUserDefined != self->_emloyeeIdUserDefined)
    {
        self->_emloyeeIdUserDefined = newEmloyeeIdUserDefined;
        self.isDirty = YES;
    }
}

static SUPSyncParamEntityDelegate *g_ODMobileMBOTaskTypesPrivSynchronizationParameters_delegate = nil;

+ (SUPSyncParamEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_ODMobileMBOTaskTypesPrivSynchronizationParameters_delegate == nil) {
			g_ODMobileMBOTaskTypesPrivSynchronizationParameters_delegate = [[SUPSyncParamEntityDelegate alloc] initWithName:@"ODMobileMBOTaskTypesPrivSynchronizationParameters" clazz:[self class]
				metaData:[self metaData] dbDelegate:[ODMobileODMobileDB delegate] database:[ODMobileODMobileDB instance]];
		}
	}
	
	return [[g_ODMobileMBOTaskTypesPrivSynchronizationParameters_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* ODMobileMBOTaskTypesPrivSynchronizationParameters_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (ODMobileMBOTaskTypesPrivSynchronizationParameters_META_DATA == nil) {
		ODMobileMBOTaskTypesPrivSynchronizationParameters_META_DATA = [[ODMobileMBOTaskTypesPrivSynchronizationParametersMetaData alloc] init];
	}
	
	return ODMobileMBOTaskTypesPrivSynchronizationParameters_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [ODMobileMBOTaskTypesPrivSynchronizationParameters metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[ODMobileMBOTaskTypesPrivSynchronizationParameters delegate]];
		self.persistentQueryDelegate = [ODMobileMBOTaskTypesPriv_pull_pq getEntityDelegateForPQ];
    }
    return self;    
}

- (void)dealloc
{
    if(_emloyeeId)
    {
        [_emloyeeId release];
        _emloyeeId = nil;
    }
	[super dealloc];
}


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (ODMobileMBOTaskTypesPrivSynchronizationParameters*)find:(NSString*)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:id_];
    return (ODMobileMBOTaskTypesPrivSynchronizationParameters*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

- (NSString*)_pk
{
    return (NSString*)[self i_pk];
}

+ (ODMobileMBOTaskTypesPrivSynchronizationParameters*)load:(NSString*)id_
{
    return (ODMobileMBOTaskTypesPrivSynchronizationParameters*)[(SUPEntityDelegate*)([[self class] delegate]) load:id_];
}

+ (ODMobileMBOTaskTypesPrivSynchronizationParameters*)getInstance
{
    ODMobileMBOTaskTypesPrivSynchronizationParameters* me = [[ODMobileMBOTaskTypesPrivSynchronizationParameters alloc] init];
    [me autorelease];
    return me;
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 960:
        return self.emloyeeId;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 960:
        self.emloyeeId = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 962:
        return self.user_sp;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 962:
        self.user_sp = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 963:
        return self.size_sp;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_:(SUPInt)v
{
    switch(id_)
    {
    case 963:
        self.size_sp = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
-(SUPBoolean) getAttributeBoolean:(int)id_
{
    switch(id_)
    {
    case 961:
        return self.emloyeeIdUserDefined;
    default:
         return [super getAttributeBoolean:id_];
    }
}

-(void) setAttributeBoolean:(int)id_:(SUPBoolean)v
{
    switch(id_)
    {
    case 961:
        self.emloyeeIdUserDefined = v;
        break;;
    default:
        [super setAttributeBoolean:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	MBOTaskTypesPrivSynchronizationParameters = \n\
	    emloyeeId = %@,\n\
	    emloyeeIdUserDefined = %i,\n\
	    size_sp = %i,\n\
	    user_sp = %@,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.emloyeeId
    	,self.emloyeeIdUserDefined
    	,self.size_sp
    	,self.user_sp
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}

@end