/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "ODMobileODMobileDB.h"

#import "ODMobileOdObject.h"
#import "ODMobileObjField.h"
#import "ODMobileActivityStatusMBO.h"
#import "ODMobileMBOActivityTemplates.h"
#import "ODMobileMBOBusinessProcess.h"
#import "ODMobileMBOCategoryPrivs.h"
#import "ODMobileMBODimMetrics.h"
#import "ODMobileMBODimQuestionBlocks.h"
#import "ODMobileMBOEmployeesSubordinations.h"
#import "ODMobileMBOObjectTypes.h"
#import "ODMobileMBOProperties.h"
#import "ODMobileMBOSubbranchesGeo.h"
#import "ODMobileMBOTaskBlockMetrics.h"
#import "ODMobileMBOTaskTypesPriv.h"
#import "ODMobileMBOUnionTypes.h"
#import "ODMobileMBOUnions.h"
#import "ODMobileMBOUnionsGeo.h"
#import "ODMobileMBOVisitTypes.h"
#import "ODMobileMBO_Logon.h"
#import "ODMobileMBO_getActivities.h"
#import "ODMobileMBO_getActivityPriorities.h"
#import "ODMobileMBO_getActivityTypes.h"
#import "ODMobileMBO_getCategories.h"
#import "ODMobileMBO_getChecklists.h"
#import "ODMobileMBO_getEmployees.h"
#import "ODMobileMBO_getSubbranchLevels.h"
#import "ODMobileMBO_getSubbranches.h"
#import "ODMobileMBO_getTaskStatuses.h"
#import "ODMobileMBO_getTaskTypes.h"
#import "ODMobileMBO_getTasks.h"
#import "ODMobileLogRecordImpl.h"
#import "ODMobileOperationReplay.h"
#import "ODMobileSISSubscriptionKey.h"
#import "ODMobileSISSubscription.h"
#import "ODMobilePackageProperties.h"
#import "ODMobileChangeLogKey.h"
#import "ODMobileChangeLogImpl.h"
#import "ODMobileOfflineAuthentication.h"
#import "ODMobileMBOCategoryPrivsSynchronizationParameters.h"
#import "ODMobileMBOCategoryPrivs_pull_pq.h"
#import "ODMobileMBOSubbranchesGeoSynchronizationParameters.h"
#import "ODMobileMBOSubbranchesGeo_pull_pq.h"
#import "ODMobileMBOTaskBlockMetricsSynchronizationParameters.h"
#import "ODMobileMBOTaskBlockMetrics_pull_pq.h"
#import "ODMobileMBOTaskTypesPrivSynchronizationParameters.h"
#import "ODMobileMBOTaskTypesPriv_pull_pq.h"
#import "ODMobileMBOUnionsSynchronizationParameters.h"
#import "ODMobileMBOUnions_pull_pq.h"
#import "ODMobileMBOUnionsGeoSynchronizationParameters.h"
#import "ODMobileMBOUnionsGeo_pull_pq.h"
#import "ODMobileMBO_getActivitiesSynchronizationParameters.h"
#import "ODMobileMBO_getActivities_pull_pq.h"
#import "ODMobileMBO_getSubbranchesSynchronizationParameters.h"
#import "ODMobileMBO_getSubbranches_pull_pq.h"
#import "ODMobileMBO_getTasksSynchronizationParameters.h"
#import "ODMobileMBO_getTasks_pull_pq.h"
#import "ODMobileKeyPackageName.h"
#import "ODMobileClientPersonalization.h"
#import "ODMobilePersonalizationParameters.h"
#import "ODMobileKeyGenerator.h"
#import "ODMobileKeyGeneratorPK.h"
#import "ODMobileLocalKeyGenerator.h"
#import "ODMobileLocalKeyGeneratorPK.h"
#import "MBODebugLogger.h"
#import "SUPEntityMessageListener.h"
#import "SUPStringList.h"
#import "SUPJsonObject.h"
#import "SUPQueueConnectionImpl.h"
#import "SUPMessageLiterals.h"
#import "ODMobileLoggerImpl.h"
#import "SUPJsonString.h"
#import "SUPEntityMap.h"
#import "SUPClassMap.h"
#import "SUPSynchronizationAction.h"
#import "SUPSynchronizationGroup.h"
#import "SUPSynchronizationContext.h"
#import "SUPSynchronizationStatus.h"
#import "SUPDatabaseDelegate.h"
#import "SUPResultSetWrapper.h"
#import "SUPAbstractDBRBS.h"
#import "SUPAbstractPersonalizationParameters.h"
#import "SUPDatabaseManagerFactory.h"

@interface ODMobileODMobileDB(hidden)
- (id)init;
- (id)initWithName:(NSString*)name;
// singleton
+ (ODMobileODMobileDB*)instance;
+ (id)allocWithZone:(NSZone *)zone;
- (id)copyWithZone:(NSZone *)zone;
- (id)retain;
- (unsigned)retainCount;
- (void)release;
- (id)autorelease;
- (void)defineMessageListenerForEntity:(NSString*)entityName withClass:(Class)entityClass;
- (NSString*)packageVersionedPrefix;
- (BOOL)checkPending_ActivityStatusMBO;
- (BOOL)checkPending_MBOActivityTemplates;
- (BOOL)checkPending_MBOBusinessProcess;
- (BOOL)checkPending_MBOCategoryPrivs;
- (BOOL)checkPending_MBODimMetrics;
- (BOOL)checkPending_MBODimQuestionBlocks;
- (BOOL)checkPending_MBOEmployeesSubordinations;
- (BOOL)checkPending_MBOObjectTypes;
- (BOOL)checkPending_MBOProperties;
- (BOOL)checkPending_MBOSubbranchesGeo;
- (BOOL)checkPending_MBOTaskBlockMetrics;
- (BOOL)checkPending_MBOTaskTypesPriv;
- (BOOL)checkPending_MBOUnionTypes;
- (BOOL)checkPending_MBOUnions;
- (BOOL)checkPending_MBOUnionsGeo;
- (BOOL)checkPending_MBOVisitTypes;
- (BOOL)checkPending_MBO_Logon;
- (BOOL)checkPending_MBO_getActivities;
- (BOOL)checkPending_MBO_getActivityPriorities;
- (BOOL)checkPending_MBO_getActivityTypes;
- (BOOL)checkPending_MBO_getCategories;
- (BOOL)checkPending_MBO_getChecklists;
- (BOOL)checkPending_MBO_getEmployees;
- (BOOL)checkPending_MBO_getSubbranchLevels;
- (BOOL)checkPending_MBO_getSubbranches;
- (BOOL)checkPending_MBO_getTaskStatuses;
- (BOOL)checkPending_MBO_getTaskTypes;
- (BOOL)checkPending_MBO_getTasks;
- (BOOL)checkPending_LogRecordImpl;
- (BOOL)checkPending_PackageProperties;
- (BOOL)checkAllReplayPending;
- (void)writeLogFromHeader:(SUPJsonObject*)o:(SUPNullableString)mbo:(SUPNullableString)method;
- (NSString *)ppmHeader;
+ (void)replay:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content;
+ (void)search:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content;
+ (void)waitForKeyGenerator;
@end
@implementation ODMobileODMobileDB

static ODMobileODMobileDB *instance = nil;
 
+ (ODMobileODMobileDB*)instance
{
    @synchronized(self) {
        if (instance == nil) {
            // Singleton is never released
            instance = [[super allocWithZone:NULL] init];
        }
    }
    return instance;
}
 
+ (id)allocWithZone:(NSZone *)zone
{
    return [[self instance] retain];
}
 
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
 
- (id)retain
{
    return self;
}
 
- (unsigned)retainCount
{
    return NSUIntegerMax;  //denotes an object that cannot be released
}
 
- (oneway void)release
{
    //do nothing
}
 
- (id)autorelease
{
    return self;
}

+ (void)initialize
{
	[self metaData];
	[self delegate];
}

static SUPDatabaseDelegate *g_ODMobileODMobileDB_delegate = nil;

+ (SUPDatabaseDelegate *) delegate
{
	@synchronized(self) {
		if (g_ODMobileODMobileDB_delegate == nil) {
			g_ODMobileODMobileDB_delegate = [[SUPDatabaseDelegate alloc] initWithDatabase:[self instance]];
		}
	}
	
	return [[g_ODMobileODMobileDB_delegate retain] autorelease];
}

- (id)init
{
    return [self initWithName:@"oDMobile1_21"];
}

- (id)initWithName:(NSString*)name;
{
    if ((self = [super initWithName:name]))
    {
        self.manager = (NSObject<SUPDatabaseManagerRBS>*)[SUPDatabaseManagerFactory dbManagerOfType:SUPDatabaseManager_UltraLite];
    	self->_concreteSubclass = [self class];
    	
   	    [self defineMessageListenerForEntity:@"ActivityStatusMBO" withClass:[ODMobileActivityStatusMBO class]];
   	    [self defineMessageListenerForEntity:@"MBOActivityTemplates" withClass:[ODMobileMBOActivityTemplates class]];
   	    [self defineMessageListenerForEntity:@"MBOBusinessProcess" withClass:[ODMobileMBOBusinessProcess class]];
   	    [self defineMessageListenerForEntity:@"MBOCategoryPrivs" withClass:[ODMobileMBOCategoryPrivs class]];
   	    [self defineMessageListenerForEntity:@"MBODimMetrics" withClass:[ODMobileMBODimMetrics class]];
   	    [self defineMessageListenerForEntity:@"MBODimQuestionBlocks" withClass:[ODMobileMBODimQuestionBlocks class]];
   	    [self defineMessageListenerForEntity:@"MBOEmployeesSubordinations" withClass:[ODMobileMBOEmployeesSubordinations class]];
   	    [self defineMessageListenerForEntity:@"MBOObjectTypes" withClass:[ODMobileMBOObjectTypes class]];
   	    [self defineMessageListenerForEntity:@"MBOProperties" withClass:[ODMobileMBOProperties class]];
   	    [self defineMessageListenerForEntity:@"MBOSubbranchesGeo" withClass:[ODMobileMBOSubbranchesGeo class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskBlockMetrics" withClass:[ODMobileMBOTaskBlockMetrics class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskTypesPriv" withClass:[ODMobileMBOTaskTypesPriv class]];
   	    [self defineMessageListenerForEntity:@"MBOUnionTypes" withClass:[ODMobileMBOUnionTypes class]];
   	    [self defineMessageListenerForEntity:@"MBOUnions" withClass:[ODMobileMBOUnions class]];
   	    [self defineMessageListenerForEntity:@"MBOUnionsGeo" withClass:[ODMobileMBOUnionsGeo class]];
   	    [self defineMessageListenerForEntity:@"MBOVisitTypes" withClass:[ODMobileMBOVisitTypes class]];
   	    [self defineMessageListenerForEntity:@"MBO_Logon" withClass:[ODMobileMBO_Logon class]];
   	    [self defineMessageListenerForEntity:@"MBO_getActivities" withClass:[ODMobileMBO_getActivities class]];
   	    [self defineMessageListenerForEntity:@"MBO_getActivityPriorities" withClass:[ODMobileMBO_getActivityPriorities class]];
   	    [self defineMessageListenerForEntity:@"MBO_getActivityTypes" withClass:[ODMobileMBO_getActivityTypes class]];
   	    [self defineMessageListenerForEntity:@"MBO_getCategories" withClass:[ODMobileMBO_getCategories class]];
   	    [self defineMessageListenerForEntity:@"MBO_getChecklists" withClass:[ODMobileMBO_getChecklists class]];
   	    [self defineMessageListenerForEntity:@"MBO_getEmployees" withClass:[ODMobileMBO_getEmployees class]];
   	    [self defineMessageListenerForEntity:@"MBO_getSubbranchLevels" withClass:[ODMobileMBO_getSubbranchLevels class]];
   	    [self defineMessageListenerForEntity:@"MBO_getSubbranches" withClass:[ODMobileMBO_getSubbranches class]];
   	    [self defineMessageListenerForEntity:@"MBO_getTaskStatuses" withClass:[ODMobileMBO_getTaskStatuses class]];
   	    [self defineMessageListenerForEntity:@"MBO_getTaskTypes" withClass:[ODMobileMBO_getTaskTypes class]];
   	    [self defineMessageListenerForEntity:@"MBO_getTasks" withClass:[ODMobileMBO_getTasks class]];
   	    [self defineMessageListenerForEntity:@"LogRecordImpl" withClass:[ODMobileLogRecordImpl class]];
   	    [self defineMessageListenerForEntity:@"OperationReplay" withClass:[ODMobileOperationReplay class]];
   	    [self defineMessageListenerForEntity:@"SISSubscription" withClass:[ODMobileSISSubscription class]];
   	    [self defineMessageListenerForEntity:@"PackageProperties" withClass:[ODMobilePackageProperties class]];
   	    [self defineMessageListenerForEntity:@"ChangeLogImpl" withClass:[ODMobileChangeLogImpl class]];
   	    [self defineMessageListenerForEntity:@"OfflineAuthentication" withClass:[ODMobileOfflineAuthentication class]];
   	    [self defineMessageListenerForEntity:@"MBOCategoryPrivsSynchronizationParameters" withClass:[ODMobileMBOCategoryPrivsSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOCategoryPrivs_pull_pq" withClass:[ODMobileMBOCategoryPrivs_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBOSubbranchesGeoSynchronizationParameters" withClass:[ODMobileMBOSubbranchesGeoSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOSubbranchesGeo_pull_pq" withClass:[ODMobileMBOSubbranchesGeo_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskBlockMetricsSynchronizationParameters" withClass:[ODMobileMBOTaskBlockMetricsSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskBlockMetrics_pull_pq" withClass:[ODMobileMBOTaskBlockMetrics_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskTypesPrivSynchronizationParameters" withClass:[ODMobileMBOTaskTypesPrivSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOTaskTypesPriv_pull_pq" withClass:[ODMobileMBOTaskTypesPriv_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBOUnionsSynchronizationParameters" withClass:[ODMobileMBOUnionsSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOUnions_pull_pq" withClass:[ODMobileMBOUnions_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBOUnionsGeoSynchronizationParameters" withClass:[ODMobileMBOUnionsGeoSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBOUnionsGeo_pull_pq" withClass:[ODMobileMBOUnionsGeo_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBO_getActivitiesSynchronizationParameters" withClass:[ODMobileMBO_getActivitiesSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBO_getActivities_pull_pq" withClass:[ODMobileMBO_getActivities_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBO_getSubbranchesSynchronizationParameters" withClass:[ODMobileMBO_getSubbranchesSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBO_getSubbranches_pull_pq" withClass:[ODMobileMBO_getSubbranches_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"MBO_getTasksSynchronizationParameters" withClass:[ODMobileMBO_getTasksSynchronizationParameters class]];
   	    [self defineMessageListenerForEntity:@"MBO_getTasks_pull_pq" withClass:[ODMobileMBO_getTasks_pull_pq class]];
   	    [self defineMessageListenerForEntity:@"ClientPersonalization" withClass:[ODMobileClientPersonalization class]];
   	    [self defineMessageListenerForEntity:@"KeyGenerator" withClass:[ODMobileKeyGenerator class]];

    	// set the logger
    	[self setLogger:[[[ODMobileLoggerImpl alloc] init] autorelease]];
        //self.pid = [NSString stringWithFormat:@"moca://%@", [SUPMessageClient getDeviceID]];
        [self.connectionProfile setPageSize:16384];
        SUPConnectionProfile *sp = [self.connectionProfile syncProfile];
        [sp setDomainName:@"default"];
        [sp setServerName:@"skd-sup-tst"];
        [sp setPortNumber:2480];
        [sp setNetworkProtocol:@"http,https"];
        [sp setNetworkStreamParams:@"trusted_certificates=;url_suffix="];
        [sp applyPropertiesFromApplication];
 	}

    return self;
    
}

- (void)defineMessageListenerForEntity:(NSString*)entityName withClass:(Class)entityClass
{
    SUPEntityMessageListener* listener = [[SUPEntityMessageListener alloc] initWithClass:entityClass];
    [listener autorelease];
    [_messageListenerMap add:(id)entityName:(id)listener];
}

- (NSString*)packageVersionedPrefix
{
	return @"ODMobile:1.21";
}

- (NSString*)syncParamsVersion
{
    return [NSString stringWithFormat:@"%@_odmobile.1_21", [[self class] getDomainName]];
}

+ (NSString*)getSyncUsername
{
    return [[self delegate] getSyncUsername];
}

+ (NSString*)getPackageName
{
	return [[self instance] packageVersionedPrefix];
}

+ (NSString*)getDomainName
{
	return [[self delegate] getDomainName];
}

+ (NSString*)defaultDomainName
{
	return @"default";
}

+ (int32_t)getSchemaVersion
{
	return [[self delegate] getSchemaVersion];
}

+ (int32_t)getProtocolVersion
{
	return [[self delegate] getProtocolVersion];
}

static SUPDatabaseMetaDataRBS* ODMobileODMobileDB_META_DATA;
static BOOL _valid_ = NO;

+ (SUPDatabaseMetaDataRBS*)metaData
{
    if (! (_valid_))
    {
		ODMobileODMobileDB_META_DATA = [[ODMobileODMobileDBMetaData alloc] init];
     	_valid_ = YES;
	}
	
	return ODMobileODMobileDB_META_DATA;
}

+ (ODMobilePersonalizationParameters*)getPersonalizationParameters
{
    return (ODMobilePersonalizationParameters*)( ((SUPDatabaseDelegate *)[self delegate]).personalizationParameters);
}

- (NSObject<SUPQueueConnection>*)queueConnection
{
    if (_queueConnection == nil)
    {
        self.queueConnection = [SUPQueueConnectionImpl getInstance:nil withPackage:@"ODMobile:1.21"];
    }
    return _queueConnection;
}

+ (id<SUPReadWriteLockManager>)dblock
{
    return [[self instance] dblock];
}
+ (SUPLocalTransaction*)beginTransaction
{
    return [[self instance] beginTransaction];
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
    return [[self instance] callbackHandler];
}

+ (SUPConnectionProfile*)connectionProfile
{
    return [[self instance] connectionProfile];
}

+ (SUPConnectionProfile*)getConnectionProfile
{
    return [[self instance] connectionProfile];
}

+ (SUPConnectionProfile*)getSynchronizationProfile
{
    return [[[self instance] connectionProfile] syncProfile];
}

+ (void)checkIfSubscribed
{
	if(([[self instance] packageIsSubscribed]) || ([[self instance] packageIsSubscribePending]))
		return;
	else
		@throw [SUPPersistenceException withMessage:@"Package is not subscribed"];
}

+ (void)clearConnection
{
    [[self instance] clearConnection];
    [[self instance] setManager:nil];
}

+ (void)createDatabase
{
    [[ODMobileODMobileDB delegate] createDatabase];
}

+ (void)deleteDatabase
{
    [[self instance] deleteDatabase];
}

+ (BOOL)databaseExists
{
    return [[self instance] databaseExists];
}

+ (id<SUPConnectionWrapper>)getConnectionWrapper
{
    return [[self instance] getConnectionWrapper];
}

+ (void)openConnection
{
    [[self instance] getConnectionWrapper];
}

+ (void)closeConnection
{
    [[self instance] closeConnection];
    [[self instance] setManager:nil];
}

+ (id<SUPLogger>)getLogger
{
	return [[self instance] logger];
}

+ (id<SUPSynchronizationGroup>) getSynchronizationGroup:(NSString*)syncGroup
{
    return [g_ODMobileODMobileDB_delegate getSynchronizationGroup:syncGroup];
}

+ (BOOL)isSynchronized:(NSString*)syncGroup
{
    return [g_ODMobileODMobileDB_delegate isSynchronized:syncGroup];
}

+ (NSDate*)getLastSynchronizationTime:(NSString*)syncGroup
{
    return [g_ODMobileODMobileDB_delegate getLastSynchronizationTime:syncGroup];
}

+ (SUPQueryResultSet*)executeQuery:(SUPQuery*)query
{
	return [[self instance] executeQuery:[self metaData] query:query];
}

+ (void)onMessage:(SUPJsonMessage*)message
{
    [[self instance] onMessage:message];
}

+ (BOOL)packageHasSubscription
{
	return (([[self instance] packageIsSubscribed]) || ([[self instance] packageIsSubscribePending]))
	;
}

+ (id<SUPQueueConnection>)queueConnection
{
    return [[self instance] queueConnection];
}

+ (void)recover
{
    [[self instance] recover];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)handler
{
    [[self instance] registerCallbackHandler:handler];
}

+ (void)resumeSubscription
{
    [[self instance] resume];
}

+ (void)setApplication:(SUPApplication*)application
{
    [[self instance] startBackgroundSynchronization];
}

+ (void)startBackgroundSynchronization
{
    [[self instance] startBackgroundSynchronization];
}

+ (void)stopBackgroundSynchronization
{
    [[self instance] stopBackgroundSynchronization];
}

+ (void)submitPendingOperations
{
	[self submitPendingOperations:nil];
}

+ (void)submitPendingOperations:(NSString*)synchronizationGroup
{
	[[ODMobileODMobileDB delegate] submitPendingOperations:synchronizationGroup];
}

+ (void)cancelPendingOperations
{
	[self cancelPendingOperations:nil];
}

+ (void)cancelPendingOperations:(NSString*)synchronizationGroup
{
	[[ODMobileODMobileDB delegate] cancelPendingOperations:synchronizationGroup];
}

+ (void)subscribe
{
	[[self delegate] subscribe];
}

+ (void)beginSynchronize:(SUPObjectList*)synchronizationGroups withContext:(NSString*)context withUploadOnly:(BOOL) uploadOnly
{
	[[self delegate] beginSynchronizeForGroups:synchronizationGroups withContext:context withUploadOnly:uploadOnly];
}

+ (void)beginSynchronize:(SUPObjectList*)synchronizationGroups withContext:(NSString*)context;
{
	[[self delegate] beginSynchronizeForGroups:synchronizationGroups withContext:context];
}

+ (void)suspendSubscription
{
    [[self delegate] suspendSubscription];
}

+ (void)unsubscribe
{
    [[self delegate] unsubscribe];
}

+ (void)replay:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content
{
    [[self instance] replay:mbo withId:counter withContent:content];
}

+ (void)search:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content
{
    [[self instance] search:mbo withId:counter withContent:content];
}

+ (void)setNeedSync
{
    [[self instance] setNeedSync];
}

+ (void)synchronizeIfNeeded
{
    [[self instance] synchronizeIfNeeded];
}

+ (BOOL)hasPendingOperations
{
	return [[self instance] checkAllReplayPending];
}

+ (void)synchronize
{
    
	[[self delegate] synchronize];
}
+ (void)synchronize:(NSString*)synchronizationGroup
{
    [[self delegate] synchronize:synchronizationGroup];
}
+ (void)synchronizeWithListener:(id<SUPSyncStatusListener>) listener
{
    [[self delegate] synchronizeWithListener:listener];
}
+ (void)synchronize:(NSString *)synchronizationGroup withListener:(id<SUPSyncStatusListener>)listener
{
    [[self delegate] synchronize:synchronizationGroup withListener:listener];
}

+ (void)enableSync
{
    [[self instance] enableSync];
}

+ (void)disableSync
{
    [[self instance] disableSync];
}

+ (BOOL)syncEnabled
{
    return [[self instance] syncEnabled];
}

+ (SUPOnlineLoginStatus*)getOnlineLoginStatus
{
	
	[self doesNotRecognizeSelector:_cmd];
	return nil;
	// this is for MBS
	//return [[self instance] onlineLoginStatus];
}

+ (void)generateEncryptionKey
{
    [[self delegate] generateEncryptionKey];
}

+ (void)changeEncryptionKey:(NSString *)newKey
{
    [[self instance] changeEncryptionKey:newKey];
}

+ (void)cleanAllData:(BOOL) keepClientOnly
{
	[[self delegate] cleanAllData:keepClientOnly];
}

+ (void)cleanAllData
{
	[[self delegate] cleanAllData];
}
/* not supported RBS
+ (BOOL)isSubscribed
{
	return ([[self instance] packageIsSubscribed] || [[self instance] packageIsSubscribePending]);
}
*/
+ (BOOL) isReplayQueueEmpty
{
	return [[self delegate] isReplayQueueEmpty];
}
+ (SUPObjectList*) getBackgroundSyncRequests
{
	return [[self delegate] getBackgroundSyncRequests];
}

+ (void) enableChangeLog
{
    [[self getSynchronizationProfile] setString:@"changeLogEnabled":@"true"];
}

+ (void) disableChangeLog
{
    [[self getSynchronizationProfile] setString:@"changeLogEnabled":@"false"];
}

+ (SUPObjectList*) getChangeLogs:(SUPQuery*)query
{
   return [[self delegate] getChangeLogs:query];
}

+ (void) deleteChangeLogs
{
    return [ODMobileChangeLogImpl deleteChangeLogs];
}

+ (NSString*) getEntityName:(int)entityType
{
    switch (entityType)
    {
        case ODMobile_ENTITY_TYPE_ActivityStatusMBO : return @"ODMobileActivityStatusMBO";
        case ODMobile_ENTITY_TYPE_MBOActivityTemplates : return @"ODMobileMBOActivityTemplates";
        case ODMobile_ENTITY_TYPE_MBOBusinessProcess : return @"ODMobileMBOBusinessProcess";
        case ODMobile_ENTITY_TYPE_MBOCategoryPrivs : return @"ODMobileMBOCategoryPrivs";
        case ODMobile_ENTITY_TYPE_MBODimMetrics : return @"ODMobileMBODimMetrics";
        case ODMobile_ENTITY_TYPE_MBODimQuestionBlocks : return @"ODMobileMBODimQuestionBlocks";
        case ODMobile_ENTITY_TYPE_MBOEmployeesSubordinations : return @"ODMobileMBOEmployeesSubordinations";
        case ODMobile_ENTITY_TYPE_MBOObjectTypes : return @"ODMobileMBOObjectTypes";
        case ODMobile_ENTITY_TYPE_MBOProperties : return @"ODMobileMBOProperties";
        case ODMobile_ENTITY_TYPE_MBOSubbranchesGeo : return @"ODMobileMBOSubbranchesGeo";
        case ODMobile_ENTITY_TYPE_MBOTaskBlockMetrics : return @"ODMobileMBOTaskBlockMetrics";
        case ODMobile_ENTITY_TYPE_MBOTaskTypesPriv : return @"ODMobileMBOTaskTypesPriv";
        case ODMobile_ENTITY_TYPE_MBOUnionTypes : return @"ODMobileMBOUnionTypes";
        case ODMobile_ENTITY_TYPE_MBOUnions : return @"ODMobileMBOUnions";
        case ODMobile_ENTITY_TYPE_MBOUnionsGeo : return @"ODMobileMBOUnionsGeo";
        case ODMobile_ENTITY_TYPE_MBOVisitTypes : return @"ODMobileMBOVisitTypes";
        case ODMobile_ENTITY_TYPE_MBO_Logon : return @"ODMobileMBO_Logon";
        case ODMobile_ENTITY_TYPE_MBO_getActivities : return @"ODMobileMBO_getActivities";
        case ODMobile_ENTITY_TYPE_MBO_getActivityPriorities : return @"ODMobileMBO_getActivityPriorities";
        case ODMobile_ENTITY_TYPE_MBO_getActivityTypes : return @"ODMobileMBO_getActivityTypes";
        case ODMobile_ENTITY_TYPE_MBO_getCategories : return @"ODMobileMBO_getCategories";
        case ODMobile_ENTITY_TYPE_MBO_getChecklists : return @"ODMobileMBO_getChecklists";
        case ODMobile_ENTITY_TYPE_MBO_getEmployees : return @"ODMobileMBO_getEmployees";
        case ODMobile_ENTITY_TYPE_MBO_getSubbranchLevels : return @"ODMobileMBO_getSubbranchLevels";
        case ODMobile_ENTITY_TYPE_MBO_getSubbranches : return @"ODMobileMBO_getSubbranches";
        case ODMobile_ENTITY_TYPE_MBO_getTaskStatuses : return @"ODMobileMBO_getTaskStatuses";
        case ODMobile_ENTITY_TYPE_MBO_getTaskTypes : return @"ODMobileMBO_getTaskTypes";
        case ODMobile_ENTITY_TYPE_MBO_getTasks : return @"ODMobileMBO_getTasks";
        default: return nil;
    }
}

+ (void) onlineLogin
{
 
        NSString *username = [[self getSynchronizationProfile] getUser];
        NSString *password = [[self getSynchronizationProfile] getPassword];
        [[self delegate] onlineLogin:username password:password];   
}

+ (void)writeLogFromHeader:(SUPJsonObject*)o:(SUPNullableString)mbo:(SUPNullableString)method
{
#if 0
	// if server sent level attribute as string, change it to integer before reading JSON
	id levelObject = [o item:@"level"];
    if (((levelObject != nil)) && ([levelObject isKindOfClass:[SUPJsonString class]]))
    {
        SUPJsonString* js = ((SUPJsonString*)(levelObject));
        [o setInt:@"level":[SUPLogLevel fromString:js.value]];
    }
	ODMobileLogRecordImpl *log = [[ODMobileLogRecordImpl alloc] initFromJson:o :0];
	if (!([o containsKey:@"messageId"]))
	{
		SUPObjectList *klist = [ODMobileKeyGenerator findAll];
		if([klist size] > 0)
			log.messageId = [ODMobileKeyGenerator generateId];
		else
			log.messageId = [ODMobileLocalKeyGenerator generateId];
	}
	if(log.component == nil) log.component = ((mbo != nil) ? mbo : @"ODMobileDB");
	if(log.operation == nil) log.operation = method;
	if(log.requestId == nil) log.requestId = [NSString stringWithFormat:@"%ld",log.messageId];
	if(log.timestamp == nil) log.timestamp = [[NSDate alloc] initWithTimeIntervalSinceNow:0];
	[log createPending:NO];
	[log autorelease];
#endif
}

+ (SUPObjectList*)getLogRecords:(SUPQuery*)query
{
	// If query is nil, create an empty one and findWithQuery will get all the records
	if(query == nil)
		query = [SUPQuery getInstance];
    return (SUPObjectList*)[ODMobileLogRecordImpl findWithQuery:query];
}

+ (void)submitLogRecords
{
    [ODMobileLogRecordImpl submitPendingOperations];
}

- (void)createDatabase
{
	[[ODMobileODMobileDB delegate] createDatabase];
}

- (BOOL)checkPending_ActivityStatusMBO
{  
    return NO;
}
- (BOOL)checkPending_MBOActivityTemplates
{  
    return NO;
}
- (BOOL)checkPending_MBOBusinessProcess
{  
    return NO;
}
- (BOOL)checkPending_MBOCategoryPrivs
{  
    return NO;
}
- (BOOL)checkPending_MBODimMetrics
{  
    return NO;
}
- (BOOL)checkPending_MBODimQuestionBlocks
{  
    return NO;
}
- (BOOL)checkPending_MBOEmployeesSubordinations
{  
    return NO;
}
- (BOOL)checkPending_MBOObjectTypes
{  
    return NO;
}
- (BOOL)checkPending_MBOProperties
{  
    return NO;
}
- (BOOL)checkPending_MBOSubbranchesGeo
{  
    return NO;
}
- (BOOL)checkPending_MBOTaskBlockMetrics
{  
    return NO;
}
- (BOOL)checkPending_MBOTaskTypesPriv
{  
    return NO;
}
- (BOOL)checkPending_MBOUnionTypes
{  
    return NO;
}
- (BOOL)checkPending_MBOUnions
{  
    return NO;
}
- (BOOL)checkPending_MBOUnionsGeo
{  
    return NO;
}
- (BOOL)checkPending_MBOVisitTypes
{  
    return NO;
}
- (BOOL)checkPending_MBO_Logon
{  
    return NO;
}
- (BOOL)checkPending_MBO_getActivities
{  
    return NO;
}
- (BOOL)checkPending_MBO_getActivityPriorities
{  
    return NO;
}
- (BOOL)checkPending_MBO_getActivityTypes
{  
    return NO;
}
- (BOOL)checkPending_MBO_getCategories
{  
    return NO;
}
- (BOOL)checkPending_MBO_getChecklists
{  
    return NO;
}
- (BOOL)checkPending_MBO_getEmployees
{  
    return NO;
}
- (BOOL)checkPending_MBO_getSubbranchLevels
{  
    return NO;
}
- (BOOL)checkPending_MBO_getSubbranches
{  
    return NO;
}
- (BOOL)checkPending_MBO_getTaskStatuses
{  
    return NO;
}
- (BOOL)checkPending_MBO_getTaskTypes
{  
    return NO;
}
- (BOOL)checkPending_MBO_getTasks
{  
    return NO;
}
- (BOOL)checkPending_LogRecordImpl
{  
    return NO;
}
- (BOOL)checkPending_PackageProperties
{  
    return NO;
}
- (BOOL)checkAllReplayPending
{
    BOOL wait = NO;
    if (wait == NO) {    
        wait =[self checkPending_ActivityStatusMBO];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOActivityTemplates];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOBusinessProcess];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOCategoryPrivs];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBODimMetrics];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBODimQuestionBlocks];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOEmployeesSubordinations];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOObjectTypes];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOProperties];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOSubbranchesGeo];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOTaskBlockMetrics];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOTaskTypesPriv];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOUnionTypes];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOUnions];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOUnionsGeo];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBOVisitTypes];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_Logon];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getActivities];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getActivityPriorities];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getActivityTypes];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getCategories];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getChecklists];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getEmployees];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getSubbranchLevels];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getSubbranches];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getTaskStatuses];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getTaskTypes];
    }
    if (wait == NO) {    
        wait =[self checkPending_MBO_getTasks];
    }
    if (wait == NO) {    
        wait =[self checkPending_LogRecordImpl];
    }
    if (wait == NO) {    
        wait =[self checkPending_PackageProperties];
    }
    return wait;
}

- (BOOL)packageIsSubscribed
{
    return NO;
}

- (BOOL)packageIsSubscribePending
{
    return NO;
}

- (BOOL)packageIsSuspended
{
    return NO;
}

- (BOOL)packageIsResumed
{
    return NO;
}

- (void)recordSubscriptionStatus:(SUPJsonMessage*)message
{
}

- (void)trackSubscriptionStatusOnMethod:(SUPString)method andRequestID:(SUPLong)counter
{
}

- (void)clearSubscriptionStatus
{
}

- (NSString *)ppmHeader
{
    SUPJsonObject *json = [[SUPJsonObject alloc] init];
    SUPAbstractPersonalizationParameters *pp = [[ODMobileODMobileDB delegate] personalizationParameters];
        NSDictionary *keyMap = [pp getAllPersonalizationKeys];
    for (id keyName in [keyMap allKeys])
    {
        [json setNullableString:keyName:[keyMap objectForKey:keyName]];
    }    
    NSData *bin = [SUPStringUtil toUTF8:[json toString]];
    [json autorelease];
    return ([SUPBase64Encoding encode:bin]);
}

#if 0
- (SUPStringList *)authParam:(NSString*)synchronizationGroup
{
    SUPJsonObject *json = [[SUPJsonObject alloc] init];;
    ODMobilePersonalizationParameters* pp = [ODMobileODMobileDB getPersonalizationParameters];;

    SUPObjectList * listClientPersonalization = pp.listClientPK;;
    for(ODMobileClientPersonalization* p in listClientPersonalization)
    {
        [json setNullableString:p.key_name:p.value];;
    }
    SUPObjectList * listSessionPersonalization = pp.listSessionPK;;
    for(ODMobileSessionPersonalization* p in listSessionPersonalization)
    {
        [json setNullableString:p.key_name:p.value];;
    }
    [json setString:@"publications":synchronizationGroup];
    [json setString:@"pv":[[NSNumber numberWithInt:[[self class] getProtocolVersion]] description]]; 
    [json setString:@"pid":self.pid];
    [json setString:@"app":self.appName];
    
    SUPConnectionProfile *sp = [[self class] getSynchronizationProfile];    
    [json setString:@"cle" :[sp getStringWithDefault:@"changeLogEnabled" :@"false"]];
    
    BOOL isInitialSync = [synchronizationGroup isEqualToString:@"initialSync"];
    BOOL async = !isInitialSync && [sp getBooleanWithDefault:@"asyncReplay" :YES];

    [json setString:@"_as" :[SUPStringUtil toString_boolean:async]];

    [json setString:@"os":[NSString stringWithFormat:@"%@ %@",[[UIDevice currentDevice] systemName],[[UIDevice currentDevice] systemVersion]]];

    NSData *bin = [SUPStringUtil toUTF8:[json toString]];
    NSString *authParam = [SUPBase64Encoding encode:bin];

    [json autorelease];

    int maxLen = 128;
    int size = ([authParam length] + maxLen - 1) / maxLen;
    if (size > 16)
    {
       @throw [NSException exceptionWithName:@"authParam error" reason:@"the length of personalization parameters exceeds the limit of authenticate parameters and the safe length is 512 bytes" userInfo:nil];
    }
    SUPStringList *authList = [SUPStringList listWithCapacity:16];
    for (int i = 0; i < size; i++)
    {
        
        [authList add:[authParam substringWithRange:NSMakeRange(i*maxLen, ((i + 1) * maxLen < [authParam length]) ? maxLen : ([authParam length] - i * maxLen))]];
    }
    for (int i = size; i < 16; i++)
    {
        [authList add:@"x"]; // spacer
    }

    return (authList);
}
#endif

- (NSMutableDictionary*)getTableMBOMap
{
    NSMutableDictionary *map = [[[NSMutableDictionary alloc] init] autorelease];
    [map setObject:@"ActivityStatusMBO" forKey:@"odmobile_1_21_activitystatusmbo"];;
    [map setObject:@"MBOActivityTemplates" forKey:@"odmobile_1_21_mboactivitytemplates"];;
    [map setObject:@"MBOBusinessProcess" forKey:@"odmobile_1_21_mbobusinessprocess"];;
    [map setObject:@"MBOCategoryPrivs" forKey:@"odmobile_1_21_mbocategoryprivs"];;
    [map setObject:@"MBODimMetrics" forKey:@"odmobile_1_21_mbodimmetrics"];;
    [map setObject:@"MBODimQuestionBlocks" forKey:@"odmobile_1_21_mbodimquestionblocks"];;
    [map setObject:@"MBOEmployeesSubordinations" forKey:@"odmobile_1_21_mboemployeessubordinations"];;
    [map setObject:@"MBOObjectTypes" forKey:@"odmobile_1_21_mboobjecttypes"];;
    [map setObject:@"MBOProperties" forKey:@"odmobile_1_21_mboproperties"];;
    [map setObject:@"MBOSubbranchesGeo" forKey:@"odmobile_1_21_mbosubbranchesgeo"];;
    [map setObject:@"MBOTaskBlockMetrics" forKey:@"odmobile_1_21_mbotaskblockmetrics"];;
    [map setObject:@"MBOTaskTypesPriv" forKey:@"odmobile_1_21_mbotasktypespriv"];;
    [map setObject:@"MBOUnionTypes" forKey:@"odmobile_1_21_mbouniontypes"];;
    [map setObject:@"MBOUnions" forKey:@"odmobile_1_21_mbounions"];;
    [map setObject:@"MBOUnionsGeo" forKey:@"odmobile_1_21_mbounionsgeo"];;
    [map setObject:@"MBOVisitTypes" forKey:@"odmobile_1_21_mbovisittypes"];;
    [map setObject:@"MBO_Logon" forKey:@"odmobile_1_21_mbo_logon"];;
    [map setObject:@"MBO_getActivities" forKey:@"odmobile_1_21_mbo_getactivities"];;
    [map setObject:@"MBO_getActivityPriorities" forKey:@"odmobile_1_21_mbo_getactivitypriorities"];;
    [map setObject:@"MBO_getActivityTypes" forKey:@"odmobile_1_21_mbo_getactivitytypes"];;
    [map setObject:@"MBO_getCategories" forKey:@"odmobile_1_21_mbo_getcategories"];;
    [map setObject:@"MBO_getChecklists" forKey:@"odmobile_1_21_mbo_getchecklists"];;
    [map setObject:@"MBO_getEmployees" forKey:@"odmobile_1_21_mbo_getemployees"];;
    [map setObject:@"MBO_getSubbranchLevels" forKey:@"odmobile_1_21_mbo_getsubbranchlevels"];;
    [map setObject:@"MBO_getSubbranches" forKey:@"odmobile_1_21_mbo_getsubbranches"];;
    [map setObject:@"MBO_getTaskStatuses" forKey:@"odmobile_1_21_mbo_gettaskstatuses"];;
    [map setObject:@"MBO_getTaskTypes" forKey:@"odmobile_1_21_mbo_gettasktypes"];;
    [map setObject:@"MBO_getTasks" forKey:@"odmobile_1_21_mbo_gettasks"];;
    [map setObject:@"LogRecordImpl" forKey:@"odmobile_1_21_logrecordimpl"];;
    [map setObject:@"OperationReplay" forKey:@"odmobile_1_21_operationreplay"];;
    [map setObject:@"SISSubscription" forKey:@"sup_sis_subscription"];;
    [map setObject:@"PackageProperties" forKey:@"odmobile_1_21_packageproperties"];;
    [map setObject:@"ChangeLogImpl" forKey:@"odmobile_1_21_changelogimpl"];;
    [map setObject:@"OfflineAuthentication" forKey:@"co_odmobile_1_21_offlineauthentication"];;
    [map setObject:@"MBOCategoryPrivsSynchronizationParameters" forKey:@"co_odmobile_1_21_mbocategoryprivssp"];;
    [map setObject:@"MBOCategoryPrivs_pull_pq" forKey:@"odmobile_1_21_mbocategoryprivs_pull_pq"];;
    [map setObject:@"MBOSubbranchesGeoSynchronizationParameters" forKey:@"co_odmobile_1_21_mbosubbranchesgeosp"];;
    [map setObject:@"MBOSubbranchesGeo_pull_pq" forKey:@"odmobile_1_21_mbosubbranchesgeo_pull_pq"];;
    [map setObject:@"MBOTaskBlockMetricsSynchronizationParameters" forKey:@"co_odmobile_1_21_mbotaskblockmetricssp"];;
    [map setObject:@"MBOTaskBlockMetrics_pull_pq" forKey:@"odmobile_1_21_mbotaskblockmetrics_pull_pq"];;
    [map setObject:@"MBOTaskTypesPrivSynchronizationParameters" forKey:@"co_odmobile_1_21_mbotasktypesprivsp"];;
    [map setObject:@"MBOTaskTypesPriv_pull_pq" forKey:@"odmobile_1_21_mbotasktypespriv_pull_pq"];;
    [map setObject:@"MBOUnionsSynchronizationParameters" forKey:@"co_odmobile_1_21_mbounionssp"];;
    [map setObject:@"MBOUnions_pull_pq" forKey:@"odmobile_1_21_mbounions_pull_pq"];;
    [map setObject:@"MBOUnionsGeoSynchronizationParameters" forKey:@"co_odmobile_1_21_mbounionsgeosp"];;
    [map setObject:@"MBOUnionsGeo_pull_pq" forKey:@"odmobile_1_21_mbounionsgeo_pull_pq"];;
    [map setObject:@"MBO_getActivitiesSynchronizationParameters" forKey:@"co_odmobile_1_21_mbo_getactivitiessp"];;
    [map setObject:@"MBO_getActivities_pull_pq" forKey:@"odmobile_1_21_mbo_getactivities_pull_pq"];;
    [map setObject:@"MBO_getSubbranchesSynchronizationParameters" forKey:@"co_odmobile_1_21_mbo_getsubbranchessp"];;
    [map setObject:@"MBO_getSubbranches_pull_pq" forKey:@"odmobile_1_21_mbo_getsubbranches_pull_pq"];;
    [map setObject:@"MBO_getTasksSynchronizationParameters" forKey:@"co_odmobile_1_21_mbo_gettaskssp"];;
    [map setObject:@"MBO_getTasks_pull_pq" forKey:@"odmobile_1_21_mbo_gettasks_pull_pq"];;
    [map setObject:@"ClientPersonalization" forKey:@"co_odmobile_1_21_clientpersonalization"];;
    [map setObject:@"KeyGenerator" forKey:@"odmobile_1_21_keygenerator"];;
    [map setObject:@"LocalKeyGenerator" forKey:@"co_odmobile_1_21_localkeygenerator"];;
    
    return map;
}

@end