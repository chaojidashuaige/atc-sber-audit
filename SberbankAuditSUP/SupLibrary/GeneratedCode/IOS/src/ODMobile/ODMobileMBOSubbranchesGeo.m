/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "ODMobileMBOSubbranchesGeo.h"
#import "ODMobileMBOSubbranchesGeoMetaData.h"
#import "SUPJsonObject.h"
#import "ODMobileODMobileDB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "ODMobileKeyGenerator.h"
#import "ODMobileLocalKeyGenerator.h"
#import "ODMobileLogRecordImpl.h"
#import "SUPSyncParamEntityDelegate.h"

@implementation ODMobileMBOSubbranchesGeo

@synthesize SUBBRANCH_ID = _SUBBRANCH_ID;
@synthesize SUBBRANCH_NAME = _SUBBRANCH_NAME;
@synthesize CHIEF_EMPLOYEE_ID = _CHIEF_EMPLOYEE_ID;
@synthesize SUBBRANCH_LEVEL_ID = _SUBBRANCH_LEVEL_ID;
@synthesize ADDRESS = _ADDRESS;
@synthesize LATITUDE = _LATITUDE;
@synthesize LONGITUDE = _LONGITUDE;
@synthesize MVS_AREA_FLG = _MVS_AREA_FLG;
@synthesize ENABLED_FLG = _ENABLED_FLG;
@synthesize PARENT_ID = _PARENT_ID;
@synthesize OSB_ID = _OSB_ID;
@synthesize GOSB_ID = _GOSB_ID;
@synthesize CA_ID = _CA_ID;
@synthesize TB_ID = _TB_ID;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

- (void)setSUBBRANCH_ID:(NSString*)newSUBBRANCH_ID
{
    if (newSUBBRANCH_ID != self->_SUBBRANCH_ID)
    {
		[self->_SUBBRANCH_ID release];
        self->_SUBBRANCH_ID = [newSUBBRANCH_ID retain];
        self.isDirty = YES;
    }
}

- (void)setSUBBRANCH_NAME:(NSString*)newSUBBRANCH_NAME
{
    if (newSUBBRANCH_NAME != self->_SUBBRANCH_NAME)
    {
		[self->_SUBBRANCH_NAME release];
        self->_SUBBRANCH_NAME = [newSUBBRANCH_NAME retain];
        self.isDirty = YES;
    }
}

- (void)setCHIEF_EMPLOYEE_ID:(NSString*)newCHIEF_EMPLOYEE_ID
{
    if (newCHIEF_EMPLOYEE_ID != self->_CHIEF_EMPLOYEE_ID)
    {
		[self->_CHIEF_EMPLOYEE_ID release];
        self->_CHIEF_EMPLOYEE_ID = [newCHIEF_EMPLOYEE_ID retain];
        self.isDirty = YES;
    }
}

- (void)setSUBBRANCH_LEVEL_ID:(NSString*)newSUBBRANCH_LEVEL_ID
{
    if (newSUBBRANCH_LEVEL_ID != self->_SUBBRANCH_LEVEL_ID)
    {
		[self->_SUBBRANCH_LEVEL_ID release];
        self->_SUBBRANCH_LEVEL_ID = [newSUBBRANCH_LEVEL_ID retain];
        self.isDirty = YES;
    }
}

- (void)setADDRESS:(NSString*)newADDRESS
{
    if (newADDRESS != self->_ADDRESS)
    {
		[self->_ADDRESS release];
        self->_ADDRESS = [newADDRESS retain];
        self.isDirty = YES;
    }
}

- (void)setLATITUDE:(NSString*)newLATITUDE
{
    if (newLATITUDE != self->_LATITUDE)
    {
		[self->_LATITUDE release];
        self->_LATITUDE = [newLATITUDE retain];
        self.isDirty = YES;
    }
}

- (void)setLONGITUDE:(NSString*)newLONGITUDE
{
    if (newLONGITUDE != self->_LONGITUDE)
    {
		[self->_LONGITUDE release];
        self->_LONGITUDE = [newLONGITUDE retain];
        self.isDirty = YES;
    }
}

- (void)setMVS_AREA_FLG:(NSString*)newMVS_AREA_FLG
{
    if (newMVS_AREA_FLG != self->_MVS_AREA_FLG)
    {
		[self->_MVS_AREA_FLG release];
        self->_MVS_AREA_FLG = [newMVS_AREA_FLG retain];
        self.isDirty = YES;
    }
}

- (void)setENABLED_FLG:(NSString*)newENABLED_FLG
{
    if (newENABLED_FLG != self->_ENABLED_FLG)
    {
		[self->_ENABLED_FLG release];
        self->_ENABLED_FLG = [newENABLED_FLG retain];
        self.isDirty = YES;
    }
}

- (void)setPARENT_ID:(NSString*)newPARENT_ID
{
    if (newPARENT_ID != self->_PARENT_ID)
    {
		[self->_PARENT_ID release];
        self->_PARENT_ID = [newPARENT_ID retain];
        self.isDirty = YES;
    }
}

- (void)setOSB_ID:(NSString*)newOSB_ID
{
    if (newOSB_ID != self->_OSB_ID)
    {
		[self->_OSB_ID release];
        self->_OSB_ID = [newOSB_ID retain];
        self.isDirty = YES;
    }
}

- (void)setGOSB_ID:(NSString*)newGOSB_ID
{
    if (newGOSB_ID != self->_GOSB_ID)
    {
		[self->_GOSB_ID release];
        self->_GOSB_ID = [newGOSB_ID retain];
        self.isDirty = YES;
    }
}

- (void)setCA_ID:(NSString*)newCA_ID
{
    if (newCA_ID != self->_CA_ID)
    {
		[self->_CA_ID release];
        self->_CA_ID = [newCA_ID retain];
        self.isDirty = YES;
    }
}

- (void)setTB_ID:(NSString*)newTB_ID
{
    if (newTB_ID != self->_TB_ID)
    {
		[self->_TB_ID release];
        self->_TB_ID = [newTB_ID retain];
        self.isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_ODMobileMBOSubbranchesGeo_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_ODMobileMBOSubbranchesGeo_delegate == nil) {
			g_ODMobileMBOSubbranchesGeo_delegate = [[SUPEntityDelegate alloc] initWithName:@"ODMobileMBOSubbranchesGeo" clazz:[self class]
				metaData:[self metaData] dbDelegate:[ODMobileODMobileDB delegate] database:[ODMobileODMobileDB instance]];
		}
	}
	
	return [[g_ODMobileMBOSubbranchesGeo_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* ODMobileMBOSubbranchesGeo_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (ODMobileMBOSubbranchesGeo_META_DATA == nil) {
		ODMobileMBOSubbranchesGeo_META_DATA = [[ODMobileMBOSubbranchesGeoMetaData alloc] init];
	}
	
	return ODMobileMBOSubbranchesGeo_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [ODMobileMBOSubbranchesGeo metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[ODMobileMBOSubbranchesGeo delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_SUBBRANCH_ID)
    {
        [_SUBBRANCH_ID release];
        _SUBBRANCH_ID = nil;
    }
    if(_SUBBRANCH_NAME)
    {
        [_SUBBRANCH_NAME release];
        _SUBBRANCH_NAME = nil;
    }
    if(_CHIEF_EMPLOYEE_ID)
    {
        [_CHIEF_EMPLOYEE_ID release];
        _CHIEF_EMPLOYEE_ID = nil;
    }
    if(_SUBBRANCH_LEVEL_ID)
    {
        [_SUBBRANCH_LEVEL_ID release];
        _SUBBRANCH_LEVEL_ID = nil;
    }
    if(_ADDRESS)
    {
        [_ADDRESS release];
        _ADDRESS = nil;
    }
    if(_LATITUDE)
    {
        [_LATITUDE release];
        _LATITUDE = nil;
    }
    if(_LONGITUDE)
    {
        [_LONGITUDE release];
        _LONGITUDE = nil;
    }
    if(_MVS_AREA_FLG)
    {
        [_MVS_AREA_FLG release];
        _MVS_AREA_FLG = nil;
    }
    if(_ENABLED_FLG)
    {
        [_ENABLED_FLG release];
        _ENABLED_FLG = nil;
    }
    if(_PARENT_ID)
    {
        [_PARENT_ID release];
        _PARENT_ID = nil;
    }
    if(_OSB_ID)
    {
        [_OSB_ID release];
        _OSB_ID = nil;
    }
    if(_GOSB_ID)
    {
        [_GOSB_ID release];
        _GOSB_ID = nil;
    }
    if(_CA_ID)
    {
        [_CA_ID release];
        _CA_ID = nil;
    }
    if(_TB_ID)
    {
        [_TB_ID release];
        _TB_ID = nil;
    }
	[super dealloc];
}


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (ODMobileMBOSubbranchesGeo*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (ODMobileMBOSubbranchesGeo*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[ODMobileMBOSubbranchesGeo class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (ODMobileMBOSubbranchesGeo*)load:(int64_t)id_
{
    return (ODMobileMBOSubbranchesGeo*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (ODMobileMBOSubbranchesGeo*)getInstance
{
    ODMobileMBOSubbranchesGeo* me = [[ODMobileMBOSubbranchesGeo alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (ODMobileMBOSubbranchesGeo*)getDownloadState
{
    return (ODMobileMBOSubbranchesGeo*)[self i_getDownloadState];
}

- (ODMobileMBOSubbranchesGeo*) getOriginalState
{
    return (ODMobileMBOSubbranchesGeo*)[self i_getOriginalState];
}
-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 712:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 712:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 699:
        return self.SUBBRANCH_NAME;
    case 700:
        return self.CHIEF_EMPLOYEE_ID;
    case 701:
        return self.SUBBRANCH_LEVEL_ID;
    case 702:
        return self.ADDRESS;
    case 703:
        return self.LATITUDE;
    case 704:
        return self.LONGITUDE;
    case 705:
        return self.MVS_AREA_FLG;
    case 706:
        return self.ENABLED_FLG;
    case 707:
        return self.PARENT_ID;
    case 708:
        return self.OSB_ID;
    case 709:
        return self.GOSB_ID;
    case 710:
        return self.CA_ID;
    case 711:
        return self.TB_ID;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 699:
        self.SUBBRANCH_NAME = v;
        break;;
    case 700:
        self.CHIEF_EMPLOYEE_ID = v;
        break;;
    case 701:
        self.SUBBRANCH_LEVEL_ID = v;
        break;;
    case 702:
        self.ADDRESS = v;
        break;;
    case 703:
        self.LATITUDE = v;
        break;;
    case 704:
        self.LONGITUDE = v;
        break;;
    case 705:
        self.MVS_AREA_FLG = v;
        break;;
    case 706:
        self.ENABLED_FLG = v;
        break;;
    case 707:
        self.PARENT_ID = v;
        break;;
    case 708:
        self.OSB_ID = v;
        break;;
    case 709:
        self.GOSB_ID = v;
        break;;
    case 710:
        self.CA_ID = v;
        break;;
    case 711:
        self.TB_ID = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 698:
        return self.SUBBRANCH_ID;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 698:
        self.SUBBRANCH_ID = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (SUPObjectList*)getLogRecords
{
   return [ODMobileLogRecordImpl findByEntity:@"MBOSubbranchesGeo":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	MBOSubbranchesGeo = \n\
	    SUBBRANCH_ID = %@,\n\
	    SUBBRANCH_NAME = %@,\n\
	    CHIEF_EMPLOYEE_ID = %@,\n\
	    SUBBRANCH_LEVEL_ID = %@,\n\
	    ADDRESS = %@,\n\
	    LATITUDE = %@,\n\
	    LONGITUDE = %@,\n\
	    MVS_AREA_FLG = %@,\n\
	    ENABLED_FLG = %@,\n\
	    PARENT_ID = %@,\n\
	    OSB_ID = %@,\n\
	    GOSB_ID = %@,\n\
	    CA_ID = %@,\n\
	    TB_ID = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.SUBBRANCH_ID
    	,self.SUBBRANCH_NAME
    	,self.CHIEF_EMPLOYEE_ID
    	,self.SUBBRANCH_LEVEL_ID
    	,self.ADDRESS
    	,self.LATITUDE
    	,self.LONGITUDE
    	,self.MVS_AREA_FLG
    	,self.ENABLED_FLG
    	,self.PARENT_ID
    	,self.OSB_ID
    	,self.GOSB_ID
    	,self.CA_ID
    	,self.TB_ID
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}




+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:370] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"j\",x.\"l\",x.\"m\",x.\"n\",x.\"o\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"p\",x.\"_rc\",x.\"_ds\" FROM \"odmobile_1_21_mbosubbranchesgeo\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"p\" from \"odmobile_1_21_mbosubbranchesgeo_"
	                               "os\" x_os where x_os.\"p\" = x.\"p\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[ODMobileMBOSubbranchesGeo class]];
}



+ (ODMobileMBOSubbranchesGeo*)findByPrimaryKey:(NSString*)sUBBRANCH_ID
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:395] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"j\",x.\"l\",x.\"m\",x.\"n\",x.\"o\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"p\",x.\"_rc\",x.\"_ds\" FROM \"odmobile_1_21_mbosubbranchesgeo\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"p\" from \"odmobile_1_21_mbosubbranch"
	                               "esgeo_os\" x_os where x_os.\"p\" = x.\"p\")))) and ( x.\"a\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:sUBBRANCH_ID];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[ODMobileMBOSubbranchesGeo class]];
	if(res && ([res size] > 0))
	{   
		ODMobileMBOSubbranchesGeo* cus = (ODMobileMBOSubbranchesGeo*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}



/*!
  @method
  @abstract Generated class method 
  @throws SUPPersistenceException
 */
+ (ODMobileMBOSubbranchesGeoSynchronizationParameters*)getSynchronizationParameters
{
    return (ODMobileMBOSubbranchesGeoSynchronizationParameters*)[(SUPSyncParamEntityDelegate*)([[ODMobileODMobileDB delegate] getDelegate:@"MBOSubbranchesGeoSynchronizationParameters"]) getSynchronizationParameters];
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end