/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "ODMobileMBO_getTasks.h"
#import "ODMobileMBO_getTasksMetaData.h"
#import "SUPJsonObject.h"
#import "ODMobileODMobileDB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "ODMobileKeyGenerator.h"
#import "ODMobileLocalKeyGenerator.h"
#import "ODMobileLogRecordImpl.h"
#import "SUPSyncParamEntityDelegate.h"

#import "ODMobileOdObject.h"

@implementation ODMobileMBO_getTasks

@synthesize UNION_ID = _UNION_ID;
@synthesize TASK_ID = _TASK_ID;
@synthesize TASK_TYPE_ID = _TASK_TYPE_ID;
@synthesize TASK_STATUS_ID = _TASK_STATUS_ID;
@synthesize CREATOR_EMPLOYEE_ID = _CREATOR_EMPLOYEE_ID;
@synthesize RESOURCE_EMPLOYEE_ID = _RESOURCE_EMPLOYEE_ID;
@synthesize TASK_DURATION = _TASK_DURATION;
@synthesize TASK_DESC = _TASK_DESC;
@synthesize PLAN_START_DTTM = _PLAN_START_DTTM;
@synthesize CHECKLIST_TEMPLATE_ID = _CHECKLIST_TEMPLATE_ID;
@synthesize INITIAL_DATA = _INITIAL_DATA;
@synthesize SUBBRANCH_ID = _SUBBRANCH_ID;
@synthesize FACT_START_DTTM = _FACT_START_DTTM;
@synthesize FACT_END_DTTM = _FACT_END_DTTM;
@synthesize SELF_CHECK_ID = _SELF_CHECK_ID;
@synthesize SELF_CHECK_RESOURCE_FIO = _SELF_CHECK_RESOURCE_FIO;
@synthesize SELF_CHECK_FACT_END_DTTM = _SELF_CHECK_FACT_END_DTTM;
@synthesize OTHER_CHECK_ID = _OTHER_CHECK_ID;
@synthesize OTHER_CHECK_RESOURCE_FIO = _OTHER_CHECK_RESOURCE_FIO;
@synthesize OTHER_CHECK_FACT_END_DTTM = _OTHER_CHECK_FACT_END_DTTM;
@synthesize QUALITY_CONTROL_ID = _QUALITY_CONTROL_ID;
@synthesize QUALITY_CONTROL_RESOURCE_FIO = _QUALITY_CONTROL_RESOURCE_FIO;
@synthesize QUALITY_CONTROL_FACT_END_DTTM = _QUALITY_CONTROL_FACT_END_DTTM;
@synthesize INSPECTOR_CONTROL_ID = _INSPECTOR_CONTROL_ID;
@synthesize INSPECTOR_CONTROL_RESOURCE_FIO = _INSPECTOR_CONTROL_RESOURCE_FIO;
@synthesize INSPECTOR_CONTROL_FACT_END_DTTM = _INSPECTOR_CONTROL_FACT_END_DTTM;
@synthesize PLAN_END_DTTM = _PLAN_END_DTTM;
@synthesize CHANGED_DTTM = _CHANGED_DTTM;
@synthesize updateCalled = _updateCalled;
@synthesize updateObjectName = _updateObjectName;
@synthesize updateOdObject = _updateOdObject;
@synthesize createCalled = _createCalled;
@synthesize createObjectName = _createObjectName;
@synthesize createOdObject = _createOdObject;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

- (void)setUNION_ID:(NSString*)newUNION_ID
{
    if (newUNION_ID != self->_UNION_ID)
    {
		[self->_UNION_ID release];
        self->_UNION_ID = [newUNION_ID retain];
        self.isDirty = YES;
    }
}

- (void)setTASK_ID:(NSString*)newTASK_ID
{
    if (newTASK_ID != self->_TASK_ID)
    {
		[self->_TASK_ID release];
        self->_TASK_ID = [newTASK_ID retain];
        self.isDirty = YES;
    }
}

- (void)setTASK_TYPE_ID:(NSString*)newTASK_TYPE_ID
{
    if (newTASK_TYPE_ID != self->_TASK_TYPE_ID)
    {
		[self->_TASK_TYPE_ID release];
        self->_TASK_TYPE_ID = [newTASK_TYPE_ID retain];
        self.isDirty = YES;
    }
}

- (void)setTASK_STATUS_ID:(NSString*)newTASK_STATUS_ID
{
    if (newTASK_STATUS_ID != self->_TASK_STATUS_ID)
    {
		[self->_TASK_STATUS_ID release];
        self->_TASK_STATUS_ID = [newTASK_STATUS_ID retain];
        self.isDirty = YES;
    }
}

- (void)setCREATOR_EMPLOYEE_ID:(NSString*)newCREATOR_EMPLOYEE_ID
{
    if (newCREATOR_EMPLOYEE_ID != self->_CREATOR_EMPLOYEE_ID)
    {
		[self->_CREATOR_EMPLOYEE_ID release];
        self->_CREATOR_EMPLOYEE_ID = [newCREATOR_EMPLOYEE_ID retain];
        self.isDirty = YES;
    }
}

- (void)setRESOURCE_EMPLOYEE_ID:(NSString*)newRESOURCE_EMPLOYEE_ID
{
    if (newRESOURCE_EMPLOYEE_ID != self->_RESOURCE_EMPLOYEE_ID)
    {
		[self->_RESOURCE_EMPLOYEE_ID release];
        self->_RESOURCE_EMPLOYEE_ID = [newRESOURCE_EMPLOYEE_ID retain];
        self.isDirty = YES;
    }
}

- (void)setTASK_DURATION:(NSString*)newTASK_DURATION
{
    if (newTASK_DURATION != self->_TASK_DURATION)
    {
		[self->_TASK_DURATION release];
        self->_TASK_DURATION = [newTASK_DURATION retain];
        self.isDirty = YES;
    }
}

- (void)setTASK_DESC:(NSString*)newTASK_DESC
{
    if (newTASK_DESC != self->_TASK_DESC)
    {
		[self->_TASK_DESC release];
        self->_TASK_DESC = [newTASK_DESC retain];
        self.isDirty = YES;
    }
}

- (void)setPLAN_START_DTTM:(NSString*)newPLAN_START_DTTM
{
    if (newPLAN_START_DTTM != self->_PLAN_START_DTTM)
    {
		[self->_PLAN_START_DTTM release];
        self->_PLAN_START_DTTM = [newPLAN_START_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setCHECKLIST_TEMPLATE_ID:(NSString*)newCHECKLIST_TEMPLATE_ID
{
    if (newCHECKLIST_TEMPLATE_ID != self->_CHECKLIST_TEMPLATE_ID)
    {
		[self->_CHECKLIST_TEMPLATE_ID release];
        self->_CHECKLIST_TEMPLATE_ID = [newCHECKLIST_TEMPLATE_ID retain];
        self.isDirty = YES;
    }
}

- (void)setINITIAL_DATA:(NSString*)newINITIAL_DATA
{
    if (newINITIAL_DATA != self->_INITIAL_DATA)
    {
		[self->_INITIAL_DATA release];
        self->_INITIAL_DATA = [newINITIAL_DATA retain];
        self.isDirty = YES;
    }
}

- (void)setSUBBRANCH_ID:(NSString*)newSUBBRANCH_ID
{
    if (newSUBBRANCH_ID != self->_SUBBRANCH_ID)
    {
		[self->_SUBBRANCH_ID release];
        self->_SUBBRANCH_ID = [newSUBBRANCH_ID retain];
        self.isDirty = YES;
    }
}

- (void)setFACT_START_DTTM:(NSString*)newFACT_START_DTTM
{
    if (newFACT_START_DTTM != self->_FACT_START_DTTM)
    {
		[self->_FACT_START_DTTM release];
        self->_FACT_START_DTTM = [newFACT_START_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setFACT_END_DTTM:(NSString*)newFACT_END_DTTM
{
    if (newFACT_END_DTTM != self->_FACT_END_DTTM)
    {
		[self->_FACT_END_DTTM release];
        self->_FACT_END_DTTM = [newFACT_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setSELF_CHECK_ID:(NSString*)newSELF_CHECK_ID
{
    if (newSELF_CHECK_ID != self->_SELF_CHECK_ID)
    {
		[self->_SELF_CHECK_ID release];
        self->_SELF_CHECK_ID = [newSELF_CHECK_ID retain];
        self.isDirty = YES;
    }
}

- (void)setSELF_CHECK_RESOURCE_FIO:(NSString*)newSELF_CHECK_RESOURCE_FIO
{
    if (newSELF_CHECK_RESOURCE_FIO != self->_SELF_CHECK_RESOURCE_FIO)
    {
		[self->_SELF_CHECK_RESOURCE_FIO release];
        self->_SELF_CHECK_RESOURCE_FIO = [newSELF_CHECK_RESOURCE_FIO retain];
        self.isDirty = YES;
    }
}

- (void)setSELF_CHECK_FACT_END_DTTM:(NSString*)newSELF_CHECK_FACT_END_DTTM
{
    if (newSELF_CHECK_FACT_END_DTTM != self->_SELF_CHECK_FACT_END_DTTM)
    {
		[self->_SELF_CHECK_FACT_END_DTTM release];
        self->_SELF_CHECK_FACT_END_DTTM = [newSELF_CHECK_FACT_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setOTHER_CHECK_ID:(NSString*)newOTHER_CHECK_ID
{
    if (newOTHER_CHECK_ID != self->_OTHER_CHECK_ID)
    {
		[self->_OTHER_CHECK_ID release];
        self->_OTHER_CHECK_ID = [newOTHER_CHECK_ID retain];
        self.isDirty = YES;
    }
}

- (void)setOTHER_CHECK_RESOURCE_FIO:(NSString*)newOTHER_CHECK_RESOURCE_FIO
{
    if (newOTHER_CHECK_RESOURCE_FIO != self->_OTHER_CHECK_RESOURCE_FIO)
    {
		[self->_OTHER_CHECK_RESOURCE_FIO release];
        self->_OTHER_CHECK_RESOURCE_FIO = [newOTHER_CHECK_RESOURCE_FIO retain];
        self.isDirty = YES;
    }
}

- (void)setOTHER_CHECK_FACT_END_DTTM:(NSString*)newOTHER_CHECK_FACT_END_DTTM
{
    if (newOTHER_CHECK_FACT_END_DTTM != self->_OTHER_CHECK_FACT_END_DTTM)
    {
		[self->_OTHER_CHECK_FACT_END_DTTM release];
        self->_OTHER_CHECK_FACT_END_DTTM = [newOTHER_CHECK_FACT_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setQUALITY_CONTROL_ID:(NSString*)newQUALITY_CONTROL_ID
{
    if (newQUALITY_CONTROL_ID != self->_QUALITY_CONTROL_ID)
    {
		[self->_QUALITY_CONTROL_ID release];
        self->_QUALITY_CONTROL_ID = [newQUALITY_CONTROL_ID retain];
        self.isDirty = YES;
    }
}

- (void)setQUALITY_CONTROL_RESOURCE_FIO:(NSString*)newQUALITY_CONTROL_RESOURCE_FIO
{
    if (newQUALITY_CONTROL_RESOURCE_FIO != self->_QUALITY_CONTROL_RESOURCE_FIO)
    {
		[self->_QUALITY_CONTROL_RESOURCE_FIO release];
        self->_QUALITY_CONTROL_RESOURCE_FIO = [newQUALITY_CONTROL_RESOURCE_FIO retain];
        self.isDirty = YES;
    }
}

- (void)setQUALITY_CONTROL_FACT_END_DTTM:(NSString*)newQUALITY_CONTROL_FACT_END_DTTM
{
    if (newQUALITY_CONTROL_FACT_END_DTTM != self->_QUALITY_CONTROL_FACT_END_DTTM)
    {
		[self->_QUALITY_CONTROL_FACT_END_DTTM release];
        self->_QUALITY_CONTROL_FACT_END_DTTM = [newQUALITY_CONTROL_FACT_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setINSPECTOR_CONTROL_ID:(NSString*)newINSPECTOR_CONTROL_ID
{
    if (newINSPECTOR_CONTROL_ID != self->_INSPECTOR_CONTROL_ID)
    {
		[self->_INSPECTOR_CONTROL_ID release];
        self->_INSPECTOR_CONTROL_ID = [newINSPECTOR_CONTROL_ID retain];
        self.isDirty = YES;
    }
}

- (void)setINSPECTOR_CONTROL_RESOURCE_FIO:(NSString*)newINSPECTOR_CONTROL_RESOURCE_FIO
{
    if (newINSPECTOR_CONTROL_RESOURCE_FIO != self->_INSPECTOR_CONTROL_RESOURCE_FIO)
    {
		[self->_INSPECTOR_CONTROL_RESOURCE_FIO release];
        self->_INSPECTOR_CONTROL_RESOURCE_FIO = [newINSPECTOR_CONTROL_RESOURCE_FIO retain];
        self.isDirty = YES;
    }
}

- (void)setINSPECTOR_CONTROL_FACT_END_DTTM:(NSString*)newINSPECTOR_CONTROL_FACT_END_DTTM
{
    if (newINSPECTOR_CONTROL_FACT_END_DTTM != self->_INSPECTOR_CONTROL_FACT_END_DTTM)
    {
		[self->_INSPECTOR_CONTROL_FACT_END_DTTM release];
        self->_INSPECTOR_CONTROL_FACT_END_DTTM = [newINSPECTOR_CONTROL_FACT_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setPLAN_END_DTTM:(NSString*)newPLAN_END_DTTM
{
    if (newPLAN_END_DTTM != self->_PLAN_END_DTTM)
    {
		[self->_PLAN_END_DTTM release];
        self->_PLAN_END_DTTM = [newPLAN_END_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setCHANGED_DTTM:(NSString*)newCHANGED_DTTM
{
    if (newCHANGED_DTTM != self->_CHANGED_DTTM)
    {
		[self->_CHANGED_DTTM release];
        self->_CHANGED_DTTM = [newCHANGED_DTTM retain];
        self.isDirty = YES;
    }
}

- (void)setUpdateCalled:(BOOL)newUpdateCalled
{
    if (newUpdateCalled != self->_updateCalled)
    {
        self->_updateCalled = newUpdateCalled;
        self.isDirty = YES;
    }
}

- (void)setUpdateObjectName:(NSString*)newUpdateObjectName
{
    if (newUpdateObjectName != self->_updateObjectName)
    {
		[self->_updateObjectName release];
        self->_updateObjectName = [newUpdateObjectName retain];
        self.isDirty = YES;
    }
}

- (void)setUpdateOdObject:(ODMobileOdObject*)newUpdateOdObject
{
    if (newUpdateOdObject != self->_updateOdObject)
    {
		[self->_updateOdObject release];
        self->_updateOdObject = [newUpdateOdObject retain];
        self.isDirty = YES;
    }
}

- (void)setCreateCalled:(BOOL)newCreateCalled
{
    if (newCreateCalled != self->_createCalled)
    {
        self->_createCalled = newCreateCalled;
        self.isDirty = YES;
    }
}

- (void)setCreateObjectName:(NSString*)newCreateObjectName
{
    if (newCreateObjectName != self->_createObjectName)
    {
		[self->_createObjectName release];
        self->_createObjectName = [newCreateObjectName retain];
        self.isDirty = YES;
    }
}

- (void)setCreateOdObject:(ODMobileOdObject*)newCreateOdObject
{
    if (newCreateOdObject != self->_createOdObject)
    {
		[self->_createOdObject release];
        self->_createOdObject = [newCreateOdObject retain];
        self.isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_ODMobileMBO_getTasks_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_ODMobileMBO_getTasks_delegate == nil) {
			g_ODMobileMBO_getTasks_delegate = [[SUPEntityDelegate alloc] initWithName:@"ODMobileMBO_getTasks" clazz:[self class]
				metaData:[self metaData] dbDelegate:[ODMobileODMobileDB delegate] database:[ODMobileODMobileDB instance]];
		}
	}
	
	return [[g_ODMobileMBO_getTasks_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* ODMobileMBO_getTasks_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (ODMobileMBO_getTasks_META_DATA == nil) {
		ODMobileMBO_getTasks_META_DATA = [[ODMobileMBO_getTasksMetaData alloc] init];
	}
	
	return ODMobileMBO_getTasks_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [ODMobileMBO_getTasks metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[ODMobileMBO_getTasks delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_UNION_ID)
    {
        [_UNION_ID release];
        _UNION_ID = nil;
    }
    if(_TASK_ID)
    {
        [_TASK_ID release];
        _TASK_ID = nil;
    }
    if(_TASK_TYPE_ID)
    {
        [_TASK_TYPE_ID release];
        _TASK_TYPE_ID = nil;
    }
    if(_TASK_STATUS_ID)
    {
        [_TASK_STATUS_ID release];
        _TASK_STATUS_ID = nil;
    }
    if(_CREATOR_EMPLOYEE_ID)
    {
        [_CREATOR_EMPLOYEE_ID release];
        _CREATOR_EMPLOYEE_ID = nil;
    }
    if(_RESOURCE_EMPLOYEE_ID)
    {
        [_RESOURCE_EMPLOYEE_ID release];
        _RESOURCE_EMPLOYEE_ID = nil;
    }
    if(_TASK_DURATION)
    {
        [_TASK_DURATION release];
        _TASK_DURATION = nil;
    }
    if(_TASK_DESC)
    {
        [_TASK_DESC release];
        _TASK_DESC = nil;
    }
    if(_PLAN_START_DTTM)
    {
        [_PLAN_START_DTTM release];
        _PLAN_START_DTTM = nil;
    }
    if(_CHECKLIST_TEMPLATE_ID)
    {
        [_CHECKLIST_TEMPLATE_ID release];
        _CHECKLIST_TEMPLATE_ID = nil;
    }
    if(_INITIAL_DATA)
    {
        [_INITIAL_DATA release];
        _INITIAL_DATA = nil;
    }
    if(_SUBBRANCH_ID)
    {
        [_SUBBRANCH_ID release];
        _SUBBRANCH_ID = nil;
    }
    if(_FACT_START_DTTM)
    {
        [_FACT_START_DTTM release];
        _FACT_START_DTTM = nil;
    }
    if(_FACT_END_DTTM)
    {
        [_FACT_END_DTTM release];
        _FACT_END_DTTM = nil;
    }
    if(_SELF_CHECK_ID)
    {
        [_SELF_CHECK_ID release];
        _SELF_CHECK_ID = nil;
    }
    if(_SELF_CHECK_RESOURCE_FIO)
    {
        [_SELF_CHECK_RESOURCE_FIO release];
        _SELF_CHECK_RESOURCE_FIO = nil;
    }
    if(_SELF_CHECK_FACT_END_DTTM)
    {
        [_SELF_CHECK_FACT_END_DTTM release];
        _SELF_CHECK_FACT_END_DTTM = nil;
    }
    if(_OTHER_CHECK_ID)
    {
        [_OTHER_CHECK_ID release];
        _OTHER_CHECK_ID = nil;
    }
    if(_OTHER_CHECK_RESOURCE_FIO)
    {
        [_OTHER_CHECK_RESOURCE_FIO release];
        _OTHER_CHECK_RESOURCE_FIO = nil;
    }
    if(_OTHER_CHECK_FACT_END_DTTM)
    {
        [_OTHER_CHECK_FACT_END_DTTM release];
        _OTHER_CHECK_FACT_END_DTTM = nil;
    }
    if(_QUALITY_CONTROL_ID)
    {
        [_QUALITY_CONTROL_ID release];
        _QUALITY_CONTROL_ID = nil;
    }
    if(_QUALITY_CONTROL_RESOURCE_FIO)
    {
        [_QUALITY_CONTROL_RESOURCE_FIO release];
        _QUALITY_CONTROL_RESOURCE_FIO = nil;
    }
    if(_QUALITY_CONTROL_FACT_END_DTTM)
    {
        [_QUALITY_CONTROL_FACT_END_DTTM release];
        _QUALITY_CONTROL_FACT_END_DTTM = nil;
    }
    if(_INSPECTOR_CONTROL_ID)
    {
        [_INSPECTOR_CONTROL_ID release];
        _INSPECTOR_CONTROL_ID = nil;
    }
    if(_INSPECTOR_CONTROL_RESOURCE_FIO)
    {
        [_INSPECTOR_CONTROL_RESOURCE_FIO release];
        _INSPECTOR_CONTROL_RESOURCE_FIO = nil;
    }
    if(_INSPECTOR_CONTROL_FACT_END_DTTM)
    {
        [_INSPECTOR_CONTROL_FACT_END_DTTM release];
        _INSPECTOR_CONTROL_FACT_END_DTTM = nil;
    }
    if(_PLAN_END_DTTM)
    {
        [_PLAN_END_DTTM release];
        _PLAN_END_DTTM = nil;
    }
    if(_CHANGED_DTTM)
    {
        [_CHANGED_DTTM release];
        _CHANGED_DTTM = nil;
    }
    if(_updateObjectName)
    {
        [_updateObjectName release];
        _updateObjectName = nil;
    }
    if(_updateOdObject)
    {
        [_updateOdObject release];
        _updateOdObject = nil;
    }
    if(_createObjectName)
    {
        [_createObjectName release];
        _createObjectName = nil;
    }
    if(_createOdObject)
    {
        [_createOdObject release];
        _createOdObject = nil;
    }
	[super dealloc];
}


- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
    case 210:
        return [[ODMobileOdObject delegate] toJsonObject:(SUPAbstractStructure*)self.updateOdObject];
    case 213:
        return [[ODMobileOdObject delegate] toJsonObject:(SUPAbstractStructure*)self.createOdObject];
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
    case 210:
        self.updateOdObject = (ODMobileOdObject*)[[ODMobileOdObject delegate] fromJsonObject:(SUPJsonObject*)value];
        break;
    case 213:
        self.createOdObject = (ODMobileOdObject*)[[ODMobileOdObject delegate] fromJsonObject:(SUPJsonObject*)value];
        break;
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

+ (ODMobileMBO_getTasks*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (ODMobileMBO_getTasks*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[ODMobileMBO_getTasks class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (ODMobileMBO_getTasks*)load:(int64_t)id_
{
    return (ODMobileMBO_getTasks*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (ODMobileMBO_getTasks*)getInstance
{
    ODMobileMBO_getTasks* me = [[ODMobileMBO_getTasks alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (ODMobileMBO_getTasks*)getDownloadState
{
    return (ODMobileMBO_getTasks*)[self i_getDownloadState];
}

- (ODMobileMBO_getTasks*) getOriginalState
{
    return (ODMobileMBO_getTasks*)[self i_getOriginalState];
}
-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 207:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 207:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 179:
        return self.UNION_ID;
    case 181:
        return self.TASK_TYPE_ID;
    case 182:
        return self.TASK_STATUS_ID;
    case 183:
        return self.CREATOR_EMPLOYEE_ID;
    case 185:
        return self.TASK_DURATION;
    case 186:
        return self.TASK_DESC;
    case 187:
        return self.PLAN_START_DTTM;
    case 188:
        return self.CHECKLIST_TEMPLATE_ID;
    case 189:
        return self.INITIAL_DATA;
    case 190:
        return self.SUBBRANCH_ID;
    case 191:
        return self.FACT_START_DTTM;
    case 192:
        return self.FACT_END_DTTM;
    case 193:
        return self.SELF_CHECK_ID;
    case 194:
        return self.SELF_CHECK_RESOURCE_FIO;
    case 195:
        return self.SELF_CHECK_FACT_END_DTTM;
    case 196:
        return self.OTHER_CHECK_ID;
    case 197:
        return self.OTHER_CHECK_RESOURCE_FIO;
    case 198:
        return self.OTHER_CHECK_FACT_END_DTTM;
    case 199:
        return self.QUALITY_CONTROL_ID;
    case 200:
        return self.QUALITY_CONTROL_RESOURCE_FIO;
    case 201:
        return self.QUALITY_CONTROL_FACT_END_DTTM;
    case 202:
        return self.INSPECTOR_CONTROL_ID;
    case 203:
        return self.INSPECTOR_CONTROL_RESOURCE_FIO;
    case 204:
        return self.INSPECTOR_CONTROL_FACT_END_DTTM;
    case 205:
        return self.PLAN_END_DTTM;
    case 206:
        return self.CHANGED_DTTM;
    case 209:
        return self.updateObjectName;
    case 212:
        return self.createObjectName;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 179:
        self.UNION_ID = v;
        break;;
    case 181:
        self.TASK_TYPE_ID = v;
        break;;
    case 182:
        self.TASK_STATUS_ID = v;
        break;;
    case 183:
        self.CREATOR_EMPLOYEE_ID = v;
        break;;
    case 185:
        self.TASK_DURATION = v;
        break;;
    case 186:
        self.TASK_DESC = v;
        break;;
    case 187:
        self.PLAN_START_DTTM = v;
        break;;
    case 188:
        self.CHECKLIST_TEMPLATE_ID = v;
        break;;
    case 189:
        self.INITIAL_DATA = v;
        break;;
    case 190:
        self.SUBBRANCH_ID = v;
        break;;
    case 191:
        self.FACT_START_DTTM = v;
        break;;
    case 192:
        self.FACT_END_DTTM = v;
        break;;
    case 193:
        self.SELF_CHECK_ID = v;
        break;;
    case 194:
        self.SELF_CHECK_RESOURCE_FIO = v;
        break;;
    case 195:
        self.SELF_CHECK_FACT_END_DTTM = v;
        break;;
    case 196:
        self.OTHER_CHECK_ID = v;
        break;;
    case 197:
        self.OTHER_CHECK_RESOURCE_FIO = v;
        break;;
    case 198:
        self.OTHER_CHECK_FACT_END_DTTM = v;
        break;;
    case 199:
        self.QUALITY_CONTROL_ID = v;
        break;;
    case 200:
        self.QUALITY_CONTROL_RESOURCE_FIO = v;
        break;;
    case 201:
        self.QUALITY_CONTROL_FACT_END_DTTM = v;
        break;;
    case 202:
        self.INSPECTOR_CONTROL_ID = v;
        break;;
    case 203:
        self.INSPECTOR_CONTROL_RESOURCE_FIO = v;
        break;;
    case 204:
        self.INSPECTOR_CONTROL_FACT_END_DTTM = v;
        break;;
    case 205:
        self.PLAN_END_DTTM = v;
        break;;
    case 206:
        self.CHANGED_DTTM = v;
        break;;
    case 209:
        self.updateObjectName = v;
        break;;
    case 212:
        self.createObjectName = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPString) getAttributeString:(int)id_
{
    switch(id_)
    {
    case 180:
        return self.TASK_ID;
    case 184:
        return self.RESOURCE_EMPLOYEE_ID;
    default:
         return [super getAttributeString:id_];
    }
}

-(void) setAttributeString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 180:
        self.TASK_ID = v;
        break;;
    case 184:
        self.RESOURCE_EMPLOYEE_ID = v;
        break;;
    default:
        [super setAttributeString:id_:v];
        break;;
    }
}
-(SUPBoolean) getAttributeBoolean:(int)id_
{
    switch(id_)
    {
    case 208:
        return self.updateCalled;
    case 211:
        return self.createCalled;
    default:
         return [super getAttributeBoolean:id_];
    }
}

-(void) setAttributeBoolean:(int)id_:(SUPBoolean)v
{
    switch(id_)
    {
    case 208:
        self.updateCalled = v;
        break;;
    case 211:
        self.createCalled = v;
        break;;
    default:
        [super setAttributeBoolean:id_:v];
        break;;
    }
}
-(id) getAttributeObject:(int)id_:(BOOL)loadFromDBIfInvalid
{
    switch(id_)
    {
    case 210:
        if (loadFromDBIfInvalid)
        {
            return self.updateOdObject;
        } else
        {
            return _updateOdObject;
        }
    case 213:
        if (loadFromDBIfInvalid)
        {
            return self.createOdObject;
        } else
        {
            return _createOdObject;
        }
    default:
         return [super getAttributeObject:id_];
    }
}

-(void) setAttributeObject:(int)id_:(id)v
{
    switch(id_)
    {
    case 210:
        self.updateOdObject = v;
        break;;
    case 213:
        self.createOdObject = v;
        break;;
    default:
        [super setAttributeObject:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (SUPObjectList*)getLogRecords
{
   return [ODMobileLogRecordImpl findByEntity:@"MBO_getTasks":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	MBO_getTasks = \n\
	    UNION_ID = %@,\n\
	    TASK_ID = %@,\n\
	    TASK_TYPE_ID = %@,\n\
	    TASK_STATUS_ID = %@,\n\
	    CREATOR_EMPLOYEE_ID = %@,\n\
	    RESOURCE_EMPLOYEE_ID = %@,\n\
	    TASK_DURATION = %@,\n\
	    TASK_DESC = %@,\n\
	    PLAN_START_DTTM = %@,\n\
	    CHECKLIST_TEMPLATE_ID = %@,\n\
	    INITIAL_DATA = %@,\n\
	    SUBBRANCH_ID = %@,\n\
	    FACT_START_DTTM = %@,\n\
	    FACT_END_DTTM = %@,\n\
	    SELF_CHECK_ID = %@,\n\
	    SELF_CHECK_RESOURCE_FIO = %@,\n\
	    SELF_CHECK_FACT_END_DTTM = %@,\n\
	    OTHER_CHECK_ID = %@,\n\
	    OTHER_CHECK_RESOURCE_FIO = %@,\n\
	    OTHER_CHECK_FACT_END_DTTM = %@,\n\
	    QUALITY_CONTROL_ID = %@,\n\
	    QUALITY_CONTROL_RESOURCE_FIO = %@,\n\
	    QUALITY_CONTROL_FACT_END_DTTM = %@,\n\
	    INSPECTOR_CONTROL_ID = %@,\n\
	    INSPECTOR_CONTROL_RESOURCE_FIO = %@,\n\
	    INSPECTOR_CONTROL_FACT_END_DTTM = %@,\n\
	    PLAN_END_DTTM = %@,\n\
	    CHANGED_DTTM = %@,\n\
	    updateCalled = %i,\n\
	    updateObjectName = %@,\n\
	    updateOdObject = %@,\n\
	    createCalled = %i,\n\
	    createObjectName = %@,\n\
	    createOdObject = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.UNION_ID
    	,self.TASK_ID
    	,self.TASK_TYPE_ID
    	,self.TASK_STATUS_ID
    	,self.CREATOR_EMPLOYEE_ID
    	,self.RESOURCE_EMPLOYEE_ID
    	,self.TASK_DURATION
    	,self.TASK_DESC
    	,self.PLAN_START_DTTM
    	,self.CHECKLIST_TEMPLATE_ID
    	,self.INITIAL_DATA
    	,self.SUBBRANCH_ID
    	,self.FACT_START_DTTM
    	,self.FACT_END_DTTM
    	,self.SELF_CHECK_ID
    	,self.SELF_CHECK_RESOURCE_FIO
    	,self.SELF_CHECK_FACT_END_DTTM
    	,self.OTHER_CHECK_ID
    	,self.OTHER_CHECK_RESOURCE_FIO
    	,self.OTHER_CHECK_FACT_END_DTTM
    	,self.QUALITY_CONTROL_ID
    	,self.QUALITY_CONTROL_RESOURCE_FIO
    	,self.QUALITY_CONTROL_FACT_END_DTTM
    	,self.INSPECTOR_CONTROL_ID
    	,self.INSPECTOR_CONTROL_RESOURCE_FIO
    	,self.INSPECTOR_CONTROL_FACT_END_DTTM
    	,self.PLAN_END_DTTM
    	,self.CHANGED_DTTM
    	,self.updateCalled
    	,self.updateObjectName
    	,self.updateOdObject
    	,self.createCalled
    	,self.createObjectName
    	,self.createOdObject
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}


/*!
  @method
  @abstract Generated instance method of type UPDATE
  @param objectName
  @param odObject
  @throws SUPPersistenceException
 */
- (void)update:(NSString*)objectName withOdObject:(ODMobileOdObject*)odObject
{
    self.isDirty = YES;
    self.updateCalled = NO;
    self.createCalled = NO;
    self.updateObjectName = objectName;
    self.updateOdObject = odObject;
    self.updateCalled = YES;
    [self update];
}

/*!
  @method
  @abstract Generated instance method of type CREATE
  @param objectName
  @param odObject
  @throws SUPPersistenceException
 */
- (void)create:(NSString*)objectName withOdObject:(ODMobileOdObject*)odObject
{
    self.isDirty = YES;
    self.updateCalled = NO;
    self.createCalled = NO;
    self.createObjectName = objectName;
    self.createOdObject = odObject;
    self.createCalled = YES;
    [self create];
}



+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:533] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"j\",x.\"l\",x.\"m\",x.\"n\",x.\"o\",x.\"p\",x.\"q\",x.\"r\",x.\"s\",x.\"t\",x.\"u\",x.\"v\",x.\"w\",x.\"x\",x.\"y\",x.\"z\",x.\"ba\",x.\"bb\",x.\"bc\",x.\"be\",x.\"bf\",x.\"bg\",x.\"bh\",x.\"bi\",x.\"bj\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"bd\",x.\"_rc\",x.\"_ds\" F"
	                               "ROM \"odmobile_1_20_mbo_gettasks\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"bd\" from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[ODMobileMBO_getTasks class]];
}



+ (ODMobileMBO_getTasks*)findByPrimaryKey:(NSString*)tASK_ID
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:558] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"j\",x.\"l\",x.\"m\",x.\"n\",x.\"o\",x.\"p\",x.\"q\",x.\"r\",x.\"s\",x.\"t\",x.\"u\",x.\"v\",x.\"w\",x.\"x\",x.\"y\",x.\"z\",x.\"ba\",x.\"bb\",x.\"bc\",x.\"be\",x.\"bf\",x.\"bg\",x.\"bh\",x.\"bi\",x.\"bj\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"bd\",x.\"_rc\",x.\""
	                               "_ds\" FROM \"odmobile_1_20_mbo_gettasks\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"bd\" from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( x.\"b\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:tASK_ID];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[ODMobileMBO_getTasks class]];
	if(res && ([res size] > 0))
	{   
		ODMobileMBO_getTasks* cus = (ODMobileMBO_getTasks*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}



+ (SUPQueryResultSet*)getTodayTasks:(NSString*)current_time
{
	return [self getTodayTasks:current_time skip:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getTodayTasks:(NSString*)current_time skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:2558] autorelease];
	[_selectSQL appendString:@" x.\"b\", x.\"d\", y.\"b\", f.\"b\", f.\"e\", b.\"b\", x.\"i\", x.\"bb\", x.\"g\", x.\"m\", x.\"h\", c.\"c\", c.\"b\", c.\"d\", c.\"e\", creator_branch.\"b\", unions.\"a\", unions.\"b\", d.\"c\", d.\"b\", d.\"d\", e.\"a\", e.\"c\", e.\"b\", e.\"d\", x.\"e\", x.\"j\", x.\"p\", x.\"q\", x.\"r\", x.\"s\", x.\"t\", x.\"u\", x.\"v\", x.\"w\", "
	                               "x.\"x\", x.\"y\", x.\"z\", x.\"ba\" FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettasktypes\" y ON (x.\"c\" like y.\"a\") left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" c ON (x.\"e\" like c.\"a\") left outer joi"
	                               "n \"odmobile_1_20_mbo_getsubbranches\" creator_branch ON (c.\"f\" like creator_branch.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" d ON (x.\"f\" like d.\"a\") left outer join \"odmobile_1_20_mbo_getsubbranches\" f ON (x.\"m\" like f.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" e ON (f.\"c\" like"
	                               " e.\"a\") left outer join \"odmobile_1_20_mbounions\" unions ON (x.\"a\" LIKE unions.\"a\") WHERE (((f.\"_pf\" = 1 or not exists (select f_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" f_os where f_os.\"p\" = f.\"p\"))) and ((d.\"_pf\" = 1 or not exists (select d_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" "
	                               "d_os where d_os.\"h\" = d.\"h\"))) and ((unions.\"_pf\" = 1 or not exists (select unions_os.\"g\" from \"odmobile_1_20_mbounions_os\" unions_os where unions_os.\"g\" = unions.\"g\"))) and ((e.\"_pf\" = 1 or not exists (select e_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" e_os where e_os.\"h\" = e.\"h\"))) and ((b.\""
	                               "_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((c.\"_pf\" = 1 or not exists (select c_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" c_os where c_os.\"h\" = c.\"h\"))) and ((creator_branch.\"_pf\" = 1 or not exists (select creator_bra"
	                               "nch_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" creator_branch_os where creator_branch_os.\"p\" = creator_branch.\"p\"))) and ((y.\"_pf\" = 1 or not exists (select y_os.\"i\" from \"odmobile_1_20_mbo_gettasktypes_os\" y_os where y_os.\"i\" = y.\"i\"))) and ((x.\"_pf\" = 1 or not exists (select x_os.\"bd\" from "
	                               "\"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (cast(x.\"i\" as bigint) < (cast(? as bigint) + 43200000)) AND (b.\"c\" IN (\'TST_ASSIGNED\', \'TST_CL_FILLING\')))  ORDER BY x.\"i\""];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:current_time];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:39] autorelease];
	[columnnames add:@"x.TASK_ID"];
	[columnnames add:@"x.TASK_STATUS_ID"];
	[columnnames add:@"y.TASK_TYPE_NAME"];
	[columnnames add:@"f.SUBBRANCH_NAME"];
	[columnnames add:@"f.ADDRESS"];
	[columnnames add:@"b.TASK_STATUS_NAME"];
	[columnnames add:@"x.PLAN_START_DTTM"];
	[columnnames add:@"x.PLAN_END_DTTM"];
	[columnnames add:@"x.TASK_DURATION"];
	[columnnames add:@"x.SUBBRANCH_ID"];
	[columnnames add:@"x.TASK_DESC"];
	[columnnames add:@"c.FIRST_NAME"];
	[columnnames add:@"c.LAST_NAME"];
	[columnnames add:@"c.PATRONYMIC"];
	[columnnames add:@"c.EMPLOYEE_POSITION"];
	[columnnames add:@"creator_branch.SUBBRANCH_NAME"];
	[columnnames add:@"unions.UNION_ID"];
	[columnnames add:@"unions.UNION_NAME"];
	[columnnames add:@"d.FIRST_NAME"];
	[columnnames add:@"d.LAST_NAME"];
	[columnnames add:@"d.PATRONYMIC"];
	[columnnames add:@"e.EMPLOYEE_ID"];
	[columnnames add:@"e.FIRST_NAME"];
	[columnnames add:@"e.LAST_NAME"];
	[columnnames add:@"e.PATRONYMIC"];
	[columnnames add:@"x.CREATOR_EMPLOYEE_ID"];
	[columnnames add:@"x.CHECKLIST_TEMPLATE_ID"];
	[columnnames add:@"x.SELF_CHECK_ID"];
	[columnnames add:@"x.SELF_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.SELF_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.OTHER_CHECK_ID"];
	[columnnames add:@"x.OTHER_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.OTHER_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.QUALITY_CONTROL_ID"];
	[columnnames add:@"x.QUALITY_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.QUALITY_CONTROL_FACT_END_DTTM"];
	[columnnames add:@"x.INSPECTOR_CONTROL_ID"];
	[columnnames add:@"x.INSPECTOR_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.INSPECTOR_CONTROL_FACT_END_DTTM"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:39] autorelease];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getPreviousTasks
{
	return [self getPreviousTasks:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getPreviousTasks:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:2525] autorelease];
	[_selectSQL appendString:@" x.\"b\", x.\"d\", y.\"b\", f.\"b\", unions.\"a\", unions.\"b\", f.\"e\", b.\"b\", x.\"i\", x.\"bb\", x.\"g\", x.\"m\", x.\"h\", c.\"c\", c.\"b\", c.\"d\", c.\"e\", creator_branch.\"b\", d.\"c\", d.\"b\", d.\"d\", e.\"a\", e.\"c\", e.\"b\", e.\"d\", x.\"e\", x.\"j\", x.\"p\", x.\"q\", x.\"r\", x.\"s\", x.\"t\", x.\"u\", x.\"v\", x.\"w\", "
	                               "x.\"x\", x.\"y\", x.\"z\", x.\"ba\" FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettasktypes\" y ON (x.\"c\" like y.\"a\") left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" c ON (x.\"e\" like c.\"a\") left outer joi"
	                               "n \"odmobile_1_20_mbo_getsubbranches\" creator_branch ON (c.\"f\" like creator_branch.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" d ON (x.\"f\" like d.\"a\") left outer join \"odmobile_1_20_mbo_getsubbranches\" f ON (x.\"m\" like f.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" e ON (f.\"c\" like"
	                               " e.\"a\") left outer join \"odmobile_1_20_mbounions\" unions ON (x.\"a\" LIKE unions.\"a\") WHERE (((f.\"_pf\" = 1 or not exists (select f_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" f_os where f_os.\"p\" = f.\"p\"))) and ((d.\"_pf\" = 1 or not exists (select d_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" "
	                               "d_os where d_os.\"h\" = d.\"h\"))) and ((unions.\"_pf\" = 1 or not exists (select unions_os.\"g\" from \"odmobile_1_20_mbounions_os\" unions_os where unions_os.\"g\" = unions.\"g\"))) and ((e.\"_pf\" = 1 or not exists (select e_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" e_os where e_os.\"h\" = e.\"h\"))) and ((b.\""
	                               "_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((c.\"_pf\" = 1 or not exists (select c_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" c_os where c_os.\"h\" = c.\"h\"))) and ((creator_branch.\"_pf\" = 1 or not exists (select creator_bra"
	                               "nch_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" creator_branch_os where creator_branch_os.\"p\" = creator_branch.\"p\"))) and ((y.\"_pf\" = 1 or not exists (select y_os.\"i\" from \"odmobile_1_20_mbo_gettasktypes_os\" y_os where y_os.\"i\" = y.\"i\"))) and ((x.\"_pf\" = 1 or not exists (select x_os.\"bd\" from "
	                               "\"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (b.\"c\" IN (\'TST_APPROVED\', \'TST_CANCELLED\', \'TST_FAILED\', \'TST_VISED\')))  ORDER BY x.\"i\""];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:39] autorelease];
	[columnnames add:@"x.TASK_ID"];
	[columnnames add:@"x.TASK_STATUS_ID"];
	[columnnames add:@"y.TASK_TYPE_NAME"];
	[columnnames add:@"f.SUBBRANCH_NAME"];
	[columnnames add:@"unions.UNION_ID"];
	[columnnames add:@"unions.UNION_NAME"];
	[columnnames add:@"f.ADDRESS"];
	[columnnames add:@"b.TASK_STATUS_NAME"];
	[columnnames add:@"x.PLAN_START_DTTM"];
	[columnnames add:@"x.PLAN_END_DTTM"];
	[columnnames add:@"x.TASK_DURATION"];
	[columnnames add:@"x.SUBBRANCH_ID"];
	[columnnames add:@"x.TASK_DESC"];
	[columnnames add:@"c.FIRST_NAME"];
	[columnnames add:@"c.LAST_NAME"];
	[columnnames add:@"c.PATRONYMIC"];
	[columnnames add:@"c.EMPLOYEE_POSITION"];
	[columnnames add:@"creator_branch.SUBBRANCH_NAME"];
	[columnnames add:@"d.FIRST_NAME"];
	[columnnames add:@"d.LAST_NAME"];
	[columnnames add:@"d.PATRONYMIC"];
	[columnnames add:@"e.EMPLOYEE_ID"];
	[columnnames add:@"e.FIRST_NAME"];
	[columnnames add:@"e.LAST_NAME"];
	[columnnames add:@"e.PATRONYMIC"];
	[columnnames add:@"x.CREATOR_EMPLOYEE_ID"];
	[columnnames add:@"x.CHECKLIST_TEMPLATE_ID"];
	[columnnames add:@"x.SELF_CHECK_ID"];
	[columnnames add:@"x.SELF_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.SELF_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.OTHER_CHECK_ID"];
	[columnnames add:@"x.OTHER_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.OTHER_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.QUALITY_CONTROL_ID"];
	[columnnames add:@"x.QUALITY_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.QUALITY_CONTROL_FACT_END_DTTM"];
	[columnnames add:@"x.INSPECTOR_CONTROL_ID"];
	[columnnames add:@"x.INSPECTOR_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.INSPECTOR_CONTROL_FACT_END_DTTM"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:39] autorelease];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getFutureTasks:(NSString*)current_time
{
	return [self getFutureTasks:current_time skip:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getFutureTasks:(NSString*)current_time skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:2592] autorelease];
	[_selectSQL appendString:@" x.\"b\", x.\"d\", y.\"b\", f.\"b\", unions.\"a\", unions.\"b\", f.\"e\", b.\"b\", x.\"i\", x.\"bb\", x.\"g\", x.\"m\", x.\"h\", c.\"c\", c.\"b\", c.\"d\", c.\"e\", creator_branch.\"b\", d.\"c\", d.\"b\", d.\"d\", e.\"a\", e.\"c\", e.\"b\", e.\"d\", x.\"e\", x.\"j\", x.\"p\", x.\"q\", x.\"r\", x.\"s\", x.\"t\", x.\"u\", x.\"v\", x.\"w\", "
	                               "x.\"x\", x.\"y\", x.\"z\", x.\"ba\" FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettasktypes\" y ON (x.\"c\" like y.\"a\") left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" c ON (x.\"e\" like c.\"a\") left outer joi"
	                               "n \"odmobile_1_20_mbo_getsubbranches\" creator_branch ON (c.\"f\" like creator_branch.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" d ON (x.\"f\" like d.\"a\") left outer join \"odmobile_1_20_mbo_getsubbranches\" f ON (x.\"m\" like f.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" e ON (f.\"c\" like"
	                               " e.\"a\") left outer join \"odmobile_1_20_mbounions\" unions ON (x.\"a\" LIKE unions.\"a\") WHERE (((f.\"_pf\" = 1 or not exists (select f_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" f_os where f_os.\"p\" = f.\"p\"))) and ((d.\"_pf\" = 1 or not exists (select d_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" "
	                               "d_os where d_os.\"h\" = d.\"h\"))) and ((unions.\"_pf\" = 1 or not exists (select unions_os.\"g\" from \"odmobile_1_20_mbounions_os\" unions_os where unions_os.\"g\" = unions.\"g\"))) and ((e.\"_pf\" = 1 or not exists (select e_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" e_os where e_os.\"h\" = e.\"h\"))) and ((b.\""
	                               "_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((c.\"_pf\" = 1 or not exists (select c_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" c_os where c_os.\"h\" = c.\"h\"))) and ((creator_branch.\"_pf\" = 1 or not exists (select creator_bra"
	                               "nch_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" creator_branch_os where creator_branch_os.\"p\" = creator_branch.\"p\"))) and ((y.\"_pf\" = 1 or not exists (select y_os.\"i\" from \"odmobile_1_20_mbo_gettasktypes_os\" y_os where y_os.\"i\" = y.\"i\"))) and ((x.\"_pf\" = 1 or not exists (select x_os.\"bd\" from "
	                               "\"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (cast(x.\"i\" as bigint) > (cast(? as bigint) + 43200000)) AND (b.\"c\" IN (\'TST_CREATED\', \'TST_PLANNED\', \'TST_ASSIGNED\', \'TST_CL_FILLING\')))  ORDER BY x.\"i\""];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:current_time];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:39] autorelease];
	[columnnames add:@"x.TASK_ID"];
	[columnnames add:@"x.TASK_STATUS_ID"];
	[columnnames add:@"y.TASK_TYPE_NAME"];
	[columnnames add:@"f.SUBBRANCH_NAME"];
	[columnnames add:@"unions.UNION_ID"];
	[columnnames add:@"unions.UNION_NAME"];
	[columnnames add:@"f.ADDRESS"];
	[columnnames add:@"b.TASK_STATUS_NAME"];
	[columnnames add:@"x.PLAN_START_DTTM"];
	[columnnames add:@"x.PLAN_END_DTTM"];
	[columnnames add:@"x.TASK_DURATION"];
	[columnnames add:@"x.SUBBRANCH_ID"];
	[columnnames add:@"x.TASK_DESC"];
	[columnnames add:@"c.FIRST_NAME"];
	[columnnames add:@"c.LAST_NAME"];
	[columnnames add:@"c.PATRONYMIC"];
	[columnnames add:@"c.EMPLOYEE_POSITION"];
	[columnnames add:@"creator_branch.SUBBRANCH_NAME"];
	[columnnames add:@"d.FIRST_NAME"];
	[columnnames add:@"d.LAST_NAME"];
	[columnnames add:@"d.PATRONYMIC"];
	[columnnames add:@"e.EMPLOYEE_ID"];
	[columnnames add:@"e.FIRST_NAME"];
	[columnnames add:@"e.LAST_NAME"];
	[columnnames add:@"e.PATRONYMIC"];
	[columnnames add:@"x.CREATOR_EMPLOYEE_ID"];
	[columnnames add:@"x.CHECKLIST_TEMPLATE_ID"];
	[columnnames add:@"x.SELF_CHECK_ID"];
	[columnnames add:@"x.SELF_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.SELF_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.OTHER_CHECK_ID"];
	[columnnames add:@"x.OTHER_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.OTHER_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.QUALITY_CONTROL_ID"];
	[columnnames add:@"x.QUALITY_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.QUALITY_CONTROL_FACT_END_DTTM"];
	[columnnames add:@"x.INSPECTOR_CONTROL_ID"];
	[columnnames add:@"x.INSPECTOR_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.INSPECTOR_CONTROL_FACT_END_DTTM"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:39] autorelease];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getCurrentTask:(NSString*)current_time
{
	return [self getCurrentTask:current_time skip:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getCurrentTask:(NSString*)current_time skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:2553] autorelease];
	[_selectSQL appendString:@" TOP 1 x.\"b\", x.\"d\", y.\"b\", f.\"b\", unions.\"a\", unions.\"b\", f.\"e\", b.\"b\", x.\"i\", x.\"bb\", x.\"g\", x.\"m\", x.\"h\", c.\"c\", c.\"b\", c.\"d\", c.\"e\", creator_branch.\"b\", d.\"c\", d.\"b\", d.\"d\", e.\"a\", e.\"c\", e.\"b\", e.\"d\", x.\"e\", x.\"j\", x.\"p\", x.\"q\", x.\"r\", x.\"s\", x.\"t\", x.\"u\", x.\"v\", x"
	                               ".\"w\", x.\"x\", x.\"y\", x.\"z\", x.\"ba\" FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettasktypes\" y ON (x.\"c\" like y.\"a\") left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" c ON (x.\"e\" like c.\"a\") left out"
	                               "er join \"odmobile_1_20_mbo_getsubbranches\" creator_branch ON (c.\"f\" like creator_branch.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" d ON (x.\"f\" like d.\"a\") left outer join \"odmobile_1_20_mbo_getsubbranches\" f ON (x.\"m\" like f.\"a\") left outer join \"odmobile_1_20_mbo_getemployees\" e ON (f.\"c"
	                               "\" like e.\"a\") left outer join \"odmobile_1_20_mbounions\" unions ON (x.\"a\" LIKE unions.\"a\") WHERE (((f.\"_pf\" = 1 or not exists (select f_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" f_os where f_os.\"p\" = f.\"p\"))) and ((d.\"_pf\" = 1 or not exists (select d_os.\"h\" from \"odmobile_1_20_mbo_getemployee"
	                               "s_os\" d_os where d_os.\"h\" = d.\"h\"))) and ((unions.\"_pf\" = 1 or not exists (select unions_os.\"g\" from \"odmobile_1_20_mbounions_os\" unions_os where unions_os.\"g\" = unions.\"g\"))) and ((e.\"_pf\" = 1 or not exists (select e_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" e_os where e_os.\"h\" = e.\"h\"))) and"
	                               " ((b.\"_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((c.\"_pf\" = 1 or not exists (select c_os.\"h\" from \"odmobile_1_20_mbo_getemployees_os\" c_os where c_os.\"h\" = c.\"h\"))) and ((creator_branch.\"_pf\" = 1 or not exists (select creat"
	                               "or_branch_os.\"p\" from \"odmobile_1_20_mbo_getsubbranches_os\" creator_branch_os where creator_branch_os.\"p\" = creator_branch.\"p\"))) and ((y.\"_pf\" = 1 or not exists (select y_os.\"i\" from \"odmobile_1_20_mbo_gettasktypes_os\" y_os where y_os.\"i\" = y.\"i\"))) and ((x.\"_pf\" = 1 or not exists (select x_os.\"bd\""
	                               " from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (cast(x.\"i\" as bigint) > (cast(? as bigint)) AND (b.\"c\" IN (\'TST_ASSIGNED\', \'TST_CL_FILLING\'))))  ORDER BY x.\"i\""];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:current_time];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:39] autorelease];
	[columnnames add:@"x.TASK_ID"];
	[columnnames add:@"x.TASK_STATUS_ID"];
	[columnnames add:@"y.TASK_TYPE_NAME"];
	[columnnames add:@"f.SUBBRANCH_NAME"];
	[columnnames add:@"unions.UNION_ID"];
	[columnnames add:@"unions.UNION_NAME"];
	[columnnames add:@"f.ADDRESS"];
	[columnnames add:@"b.TASK_STATUS_NAME"];
	[columnnames add:@"x.PLAN_START_DTTM"];
	[columnnames add:@"x.PLAN_END_DTTM"];
	[columnnames add:@"x.TASK_DURATION"];
	[columnnames add:@"x.SUBBRANCH_ID"];
	[columnnames add:@"x.TASK_DESC"];
	[columnnames add:@"c.FIRST_NAME"];
	[columnnames add:@"c.LAST_NAME"];
	[columnnames add:@"c.PATRONYMIC"];
	[columnnames add:@"c.EMPLOYEE_POSITION"];
	[columnnames add:@"creator_branch.SUBBRANCH_NAME"];
	[columnnames add:@"d.FIRST_NAME"];
	[columnnames add:@"d.LAST_NAME"];
	[columnnames add:@"d.PATRONYMIC"];
	[columnnames add:@"e.EMPLOYEE_ID"];
	[columnnames add:@"e.FIRST_NAME"];
	[columnnames add:@"e.LAST_NAME"];
	[columnnames add:@"e.PATRONYMIC"];
	[columnnames add:@"x.CREATOR_EMPLOYEE_ID"];
	[columnnames add:@"x.CHECKLIST_TEMPLATE_ID"];
	[columnnames add:@"x.SELF_CHECK_ID"];
	[columnnames add:@"x.SELF_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.SELF_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.OTHER_CHECK_ID"];
	[columnnames add:@"x.OTHER_CHECK_RESOURCE_FIO"];
	[columnnames add:@"x.OTHER_CHECK_FACT_END_DTTM"];
	[columnnames add:@"x.QUALITY_CONTROL_ID"];
	[columnnames add:@"x.QUALITY_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.QUALITY_CONTROL_FACT_END_DTTM"];
	[columnnames add:@"x.INSPECTOR_CONTROL_ID"];
	[columnnames add:@"x.INSPECTOR_CONTROL_RESOURCE_FIO"];
	[columnnames add:@"x.INSPECTOR_CONTROL_FACT_END_DTTM"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:39] autorelease];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	[columntypes add:[SUPDataType forName:@"string?"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getTodayTasksCount:(NSString*)current_time
{
	return [self getTodayTasksCount:current_time skip:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getTodayTasksCount:(NSString*)current_time skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:536] autorelease];
	[_selectSQL appendString:@" count(x.\"b\") FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") WHERE (((b.\"_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((x.\"_pf\" = 1"
	                               " or not exists (select x_os.\"bd\" from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (cast(x.\"i\" as bigint) < (cast(? as bigint)  43200000)) AND (b.\"c\" IN (\'TST_ASSIGNED\', \'TST_CL_FILLING\')))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:current_time];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:1] autorelease];
	[columnnames add:@"(x.TASK_ID)"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:1] autorelease];
	[columntypes add:[SUPDataType forName:@"int"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getPreviousTasksCount
{
	return [self getPreviousTasksCount:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getPreviousTasksCount:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:503] autorelease];
	[_selectSQL appendString:@" count(x.\"b\") FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") WHERE (((b.\"_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((x.\"_pf\" = 1"
	                               " or not exists (select x_os.\"bd\" from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (b.\"c\" IN (\'TST_APPROVED\', \'TST_CANCELLED\', \'TST_FAILED\', \'TST_VISED\')))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:1] autorelease];
	[columnnames add:@"(x.TASK_ID)"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:1] autorelease];
	[columntypes add:[SUPDataType forName:@"int"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



+ (SUPQueryResultSet*)getFutureTasksCount:(NSString*)current_time
{
	return [self getFutureTasksCount:current_time skip:0 take:INT_MAX]; 
}


	

+ (SUPQueryResultSet*)getFutureTasksCount:(NSString*)current_time skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:570] autorelease];
	[_selectSQL appendString:@" count(x.\"b\") FROM \"odmobile_1_20_mbo_gettasks\" x left outer join \"odmobile_1_20_mbo_gettaskstatuses\" b ON (x.\"d\" like b.\"a\") WHERE (((b.\"_pf\" = 1 or not exists (select b_os.\"d\" from \"odmobile_1_20_mbo_gettaskstatuses_os\" b_os where b_os.\"d\" = b.\"d\"))) and ((x.\"_pf\" = 1"
	                               " or not exists (select x_os.\"bd\" from \"odmobile_1_20_mbo_gettasks_os\" x_os where x_os.\"bd\" = x.\"bd\")))) and ( (cast(x.\"i\" as bigint) > (cast(? as bigint)  43200000)) AND (b.\"c\" IN (\'TST_CREATED\', \'TST_PLANNED\', \'TST_ASSIGNED\', \'TST_CL_FILLING\')))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:current_time];
	
	SUPStringList *columnnames = [[[SUPStringList alloc] initWithCapacity:1] autorelease];
	[columnnames add:@"(x.TASK_ID)"];
	
	SUPObjectList* columntypes = [[[SUPObjectList alloc] initWithCapacity:1] autorelease];
	[columntypes add:[SUPDataType forName:@"int"]];
	
	return [[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withColumns:columnnames withColumnTypes:columntypes withSkip:skip withTake:take];
}



/*!
  @method
  @abstract Generated class method 
  @throws SUPPersistenceException
 */
+ (ODMobileMBO_getTasksSynchronizationParameters*)getSynchronizationParameters
{
    return (ODMobileMBO_getTasksSynchronizationParameters*)[(SUPSyncParamEntityDelegate*)([[ODMobileODMobileDB delegate] getDelegate:@"MBO_getTasksSynchronizationParameters"]) getSynchronizationParameters];
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end