#import "sybase_sup.h"

#import "SUPAbstractDBRBS.h"
#import "SUPSyncStatusListener.h"
#import "SUPDatabaseDelegate.h"
#import "ODMobileODMobileDBMetaData.h"

// Entity type definitions (for change log query)
#ifndef _ENTITY_TYPES_FOR_ODMobileODMobileDB_
#define _ENTITY_TYPES_FOR_ODMobileODMobileDB_
#define ODMobile_ENTITY_TYPE_ActivityStatusMBO 0
#define ODMobile_ENTITY_TYPE_MBOActivityTemplates 4
#define ODMobile_ENTITY_TYPE_MBOBusinessProcess 5
#define ODMobile_ENTITY_TYPE_MBOCategoryPrivs 6
#define ODMobile_ENTITY_TYPE_MBODimMetrics 8
#define ODMobile_ENTITY_TYPE_MBODimQuestionBlocks 9
#define ODMobile_ENTITY_TYPE_MBOEmployeesSubordinations 10
#define ODMobile_ENTITY_TYPE_MBOObjectTypes 11
#define ODMobile_ENTITY_TYPE_MBOProperties 12
#define ODMobile_ENTITY_TYPE_MBOSubbranchesGeo 13
#define ODMobile_ENTITY_TYPE_MBOTaskBlockMetrics 15
#define ODMobile_ENTITY_TYPE_MBOTaskTypesPriv 17
#define ODMobile_ENTITY_TYPE_MBOUnionTypes 19
#define ODMobile_ENTITY_TYPE_MBOUnions 20
#define ODMobile_ENTITY_TYPE_MBOUnionsGeo 21
#define ODMobile_ENTITY_TYPE_MBOVisitTypes 24
#define ODMobile_ENTITY_TYPE_MBO_Logon 25
#define ODMobile_ENTITY_TYPE_MBO_getActivities 26
#define ODMobile_ENTITY_TYPE_MBO_getActivityPriorities 28
#define ODMobile_ENTITY_TYPE_MBO_getActivityTypes 29
#define ODMobile_ENTITY_TYPE_MBO_getCategories 30
#define ODMobile_ENTITY_TYPE_MBO_getChecklists 31
#define ODMobile_ENTITY_TYPE_MBO_getEmployees 32
#define ODMobile_ENTITY_TYPE_MBO_getSubbranchLevels 33
#define ODMobile_ENTITY_TYPE_MBO_getSubbranches 34
#define ODMobile_ENTITY_TYPE_MBO_getTaskStatuses 36
#define ODMobile_ENTITY_TYPE_MBO_getTaskTypes 37
#define ODMobile_ENTITY_TYPE_MBO_getTasks 38
#endif
// End of entity type definitions
@class ODMobilePersonalizationParameters;
@class SUPApplication;
@protocol SUPSynchronizationGroup;


@class SUPClassDelegate;
@class SUPClassMetaDataRBS;

// public interface declaration, can be used by application. 
/*!
 @class ODMobileODMobileDB
 @abstract This class is part of package "ODMobile:1.20"
 @discussion Generated by Sybase Unwired Platform, compiler version 2.1.3.358
*/

@interface ODMobileODMobileDB : SUPAbstractDBRBS
{
@private
    
}
/*!
  @method 
  @abstract Returns the personalization parameters for this package
  @discussion
  @throws SUPPersistenceException
 */
+ (ODMobilePersonalizationParameters*)getPersonalizationParameters;

/*!
  @method 
  @abstract Returns the database metadata
  @discussion
 */
+ (SUPDatabaseMetaDataRBS*)metaData;

/*!
  @method 
  @abstract Returns the database delegate
  @discussion
 */
+ (SUPDatabaseDelegate*)delegate;

/*!
  @method 
  @abstract Returns the callback handler for the database class.
  @discussion
 */
+ (NSObject<SUPCallbackHandler>*)callbackHandler;
/*!
  @method 
  @abstract Returns the connection profile.
  @discussion
 */
+ (SUPConnectionProfile*)connectionProfile;
/*!
  @method 
  @abstract Returns the connection profile.
  @discussion
 */
+ (SUPConnectionProfile*)getConnectionProfile;
/*!
  @method 
  @abstract Returns the synchronization profile.
  @discussion
 */
+ (SUPConnectionProfile*)getSynchronizationProfile;
/*!
  @method 
  @abstract Creates the database and initializes the tables for all MBOs in this package.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)createDatabase;
/*!
  @method 
  @abstract Drop all data from all tables: if keepClientOnly = YES, do not drop data from client-only tables.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)cleanAllData:(BOOL) keepClientOnly;
/*!
  @method 
  @abstract Drop all data from all tables, except client-only tables.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)cleanAllData;
/*!
  @method 
  @abstract Deletes the database for this package.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)deleteDatabase;
/*!
  @method 
  @abstract Return true if database exists, false otherwise.
  @discussion
 */
+ (BOOL)databaseExists;
/*!
  @method 
  @abstract Return the database connection for this package.
  @discussion
 */
+ (id<SUPConnectionWrapper>)getConnectionWrapper;
/*!
  @method 
  @abstract Opens database connection.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)openConnection;
/*!
  @method 
  @abstract Closes database connection.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)closeConnection;
/*!
  @method 
  @abstract Return the username used in communcations with server.
  @discussion
 */
+ (NSString*)getSyncUsername;
/*!
  @method 
  @abstract Return the package name.
  @discussion
 */
+ (NSString*)getPackageName;
/*!
  @method 
  @abstract Return the current server domain name.
  @discussion
 */
+ (NSString*)getDomainName;
/*!
  @method 
  @abstract Return the database schema version of this package.
  @discussion
 */
+ (int32_t)getSchemaVersion;
/*!
  @method 
  @abstract Return the protocol version of this package.
  @discussion
 */
+ (int32_t)getProtocolVersion;
/*!
  @method 
  @abstract Return the logger for this package.
  @discussion
 */
+ (id<SUPLogger>)getLogger;
/*!
  @method 
  @abstract Return the SynchronizationGroup instance corresponding to the given group name.
  @discussion
 */
+ (id<SUPSynchronizationGroup>) getSynchronizationGroup:(NSString*)syncGroup;
/*!
  @method 
  @abstract Returns true if this sync group has ever been synchronized.
  @discussion
 */
+ (BOOL)isSynchronized:(NSString*)syncGroup;
/*!
  @method 
  @abstract Returns the last time this group was synchronized, or nil if it has not been synchronized.
  @discussion
 */
+ (NSDate*)getLastSynchronizationTime:(NSString*)syncGroup;
/*!
  @method 
  @abstract Execute the passed in query and return a result set.
  @discussion
  @throws SUPPersistenceException
 */
+ (SUPQueryResultSet*)executeQuery:(SUPQuery*)query;
/*!
  @method 
  @abstract Set the callback handler for the database class.
  @discussion
 */
+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)handler;
/*!
  @method 
  @abstract Set Application instance.
  @discussion
 */
+ (void)setApplication:(SUPApplication*)application;
/*!
  @method 
  @abstract Begin server communications.
  @discussion
 */
+ (void)startBackgroundSynchronization;
/*!
  @method 
  @abstract End server communications.
  @discussion
 */
+ (void)stopBackgroundSynchronization;
/*!
  @method 
  @abstract Resume the subscription to the server after a call to suspendSubscription.
  @discussion
 */
+ (void)resumeSubscription;
/*!
  @method 
  @abstract Subscribe to the server.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)subscribe;
/*!
  @method 
  @abstract (Deprecated) Send a message to the server to synchronize this client with the specified synchronization groups.
  @discussion
 */
+ (void)beginSynchronize:(SUPObjectList*)synchronizationGroups withContext:(NSString*)context withUploadOnly:(BOOL) uploadOnly;
/*!
  @method 
  @abstract Send a message to the server to synchronize this client with the specified synchronization groups.
  @discussion
 */
+ (void)beginSynchronize:(SUPObjectList*)synchronizationGroups withContext:(NSString*)context;
/*!
  @method 
  @abstract Sets a flag to disable synchronization and cancel any ongoing synchronizations for this SUP package.
  @discussion
 */
+ (void)disableSync;
/*!
  @method 
  @abstract Enables or re-enables synchronization for this SUP package.
  @discussion
 */
+ (void)enableSync;
/*!
  @method 
  @abstract Returns true if synchronization is enabled, false otherwise.
  @discussion
 */
+ (BOOL)syncEnabled;
/*!
  @method 
  @abstract Submit all the pending operations (ready for sending to server) 
  @discussion
  @throws SUPPersistenceException
 */
+ (void)submitPendingOperations;
/*!
  @method 
  @abstract Submit all the pending operations for the given synchronization group (ready for sending to server).
  @discussion
  @throws SUPPersistenceException
 */
+ (void)submitPendingOperations:(NSString*)synchronizationGroup;
/*!
  @method 
  @abstract Search through all entities in this package and cancel any pending changes.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)cancelPendingOperations;
/*!
  @method 
  @abstract Search through all entities in this package for the given synchronization group and cancel any pending changes.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)cancelPendingOperations:(NSString*)synchronizationGroup;
/*!
  @method 
  @abstract return TRUE if there are replay pending requests, false otherwise.
  @discussion
 */
+ (BOOL)hasPendingOperations;
/*!
  @method 
  @abstract Suspend the current server subscription.
  @discussion
 */
+ (void)suspendSubscription;
/*!
  @method 
  @abstract Send the recover message to the server to have it send all the current data for this client.
  @discussion
 */
+ (void)recover;
/*!
  @method 
  @abstract End the current subscription to the server.
  @discussion
 */
+ (void)unsubscribe;
/*!
  @method 
  @abstract Generate a new encryption key.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)generateEncryptionKey;
/*!
  @method 
  @abstract Change the encryption key used for database encryption.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)changeEncryptionKey:(NSString *)newKey;
/*!
  @method 
  @abstract Return log records matching the passed in query.
  @discussion
  @throws SUPPersistenceException
 */
+ (SUPObjectList*)getLogRecords:(SUPQuery*)query;
/*!
  @method 
  @abstract Submit any pending client-created log records to the server.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)submitLogRecords;
/*!
  @method 
  @abstract synchronize the synchronizationGroup with server.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)synchronize:(NSString*)synchronizationGroup;
/*!
  @method 
  @abstract synchronize all the synchronizationGroups with server.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)synchronize;
/*!
  @method 
  @abstract synchronize the synchronizationGroups with server, using custom syncStatusListener.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)synchronizeWithListener:(id<SUPSyncStatusListener>) listener;
/*!
  @method 
  @abstract synchronize the synchronizationGroup with server, using custom syncStatusListener.
  @discussion
  @throws SUPPersistenceException
 */
+ (void)synchronize:(NSString *)synchronizationGroup withListener:(id<SUPSyncStatusListener>)listener;
/*!
  @method 
  @abstract return YES if there is no replay pending request, NO otherwise
  @discussion
 */
+ (BOOL) isReplayQueueEmpty;
/*!
  @method 
  @abstract Retrieve currently queued background synchronization requests.
  @discussion
 */
+ (SUPObjectList*) getBackgroundSyncRequests;
/*!
  @method 
  @abstract enable Change Log.
  @discussion
 */
+ (void) enableChangeLog;
/*!
  @method 
  @abstract disable Change Log.
  @discussion
 */
+ (void) disableChangeLog;
/*!
  @method 
  @abstract Get the log record based on the query filtering 
  @discussion
 */
+ (SUPObjectList*) getChangeLogs:(SUPQuery*)query;
/*!
  @method 
  @abstract Delete all the change logs in the client.
  @discussion
 */
+ (void) deleteChangeLogs;
/*!
  @method 
  @abstract Get the MBO class name string from change log entity type. 
  @discussion
 */
+ (NSString*) getEntityName:(int)entityType;
/*!
  @method 
  @abstract Authenticate against the server.
  @discussion
  @throws SUPPersistenceException
 */
+ (void) onlineLogin;
/*!
  @method 
  @abstract Begin a local transaction.
  @discussion
 */
+ (SUPLocalTransaction*)beginTransaction;


@end


// internal methods declaration, only used by generated code.
@interface ODMobileODMobileDB(internal)
+ (id<SUPReadWriteLockManager>)dblock;
+ (ODMobileODMobileDB*)instance;
+ (void)replay:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content;
+ (void)search:(NSString *)mbo withId:(int64_t)counter withContent:(SUPJsonArray*)content;
+ (void)onMessage:(SUPJsonMessage*)message;
+ (id<SUPQueueConnection>)queueConnection;
+ (void)checkIfSubscribed;
+ (BOOL)packageHasSubscription;
+ (void)clearConnection;
+ (void)setNeedSync;
+ (void)synchronizeIfNeeded;
@end